/* tslint:disable */
/* eslint-disable */
/*
Wikimedia

This API provides cacheable and straightforward access to Wikimedia content and data, in machine-readable formats.
### Global Rules
- Limit your clients to no more than 200 requests/s to this API.
  Each API endpoint's documentation may detail more specific usage limits.
- Set a unique `User-Agent` or `Api-User-Agent` header that
  allows us to contact you quickly. Email addresses or URLs
  of contact pages work well.

By using this API, you agree to Wikimedia's  [Terms of Use](https://wikimediafoundation.org/wiki/Terms_of_Use) and [Privacy Policy](https://wikimediafoundation.org/wiki/Privacy_policy). Unless otherwise specified in the endpoint documentation below, content accessed via this API is licensed under the [CC-BY-SA 3.0](https://creativecommons.org/licenses/by-sa/3.0/)  and [GFDL](https://www.gnu.org/copyleft/fdl.html) licenses, and you irrevocably agree to release modifications or additions made through this API under these licenses.  See https://www.mediawiki.org/wiki/REST_API for background and details.
### Endpoint documentation
Please consult each endpoint's documentation for details on:
- Licensing information for the specific type of content
  and data served via the endpoint.
- Stability markers to inform you about development status and
  change policy, according to
  [our API version policy](https://www.mediawiki.org/wiki/API_versioning).
- Endpoint specific usage limits.


The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Problem } from '../models';
// @ts-ignore
import { UniqueDevices } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * UniqueDevicesDataApi - axios parameter creator
 * @export
 */
export const UniqueDevicesDataApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Given a project and a date range, returns a timeseries of unique devices counts. You need to specify a project, and can filter by accessed site (mobile or desktop). You can choose between daily and hourly granularity as well.  - Stability: [stable](https://www.mediawiki.org/wiki/API_versioning#Stable) - Rate limit: 100 req/s - License: Data accessible via this endpoint is available under the   [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/). 
         * @summary Get unique devices count per project
         * @param {string} project If you want to filter by project, use the domain of any Wikimedia project, for example \&#39;en.wikipedia.org\&#39;, \&#39;www.mediawiki.org\&#39; or \&#39;commons.wikimedia.org\&#39;. 
         * @param {'all-sites' | 'desktop-site' | 'mobile-site'} accessSite If you want to filter by accessed site, use one of desktop-site or mobile-site. If you are interested in unique devices regardless of accessed site, use or all-sites. 
         * @param {'daily' | 'monthly'} granularity The time unit for the response data. As of today, the supported granularities for this endpoint are daily and monthly. 
         * @param {string} start The timestamp of the first day/month to include, in YYYYMMDD format
         * @param {string} end The timestamp of the last day/month to include, in YYYYMMDD format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByProjectAndDateRange: async (project: string, accessSite: 'all-sites' | 'desktop-site' | 'mobile-site', granularity: 'daily' | 'monthly', start: string, end: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'project' is not null or undefined
            assertParamExists('getByProjectAndDateRange', 'project', project)
            // verify required parameter 'accessSite' is not null or undefined
            assertParamExists('getByProjectAndDateRange', 'accessSite', accessSite)
            // verify required parameter 'granularity' is not null or undefined
            assertParamExists('getByProjectAndDateRange', 'granularity', granularity)
            // verify required parameter 'start' is not null or undefined
            assertParamExists('getByProjectAndDateRange', 'start', start)
            // verify required parameter 'end' is not null or undefined
            assertParamExists('getByProjectAndDateRange', 'end', end)
            const localVarPath = `/metrics/unique-devices/{project}/{access-site}/{granularity}/{start}/{end}`
                .replace(`{${"project"}}`, encodeURIComponent(String(project !== undefined ? project : `-project-`)))
                .replace(`{${"access-site"}}`, encodeURIComponent(String(accessSite !== undefined ? accessSite : `-access-site-`)))
                .replace(`{${"granularity"}}`, encodeURIComponent(String(granularity !== undefined ? granularity : `-granularity-`)))
                .replace(`{${"start"}}`, encodeURIComponent(String(start !== undefined ? start : `-start-`)))
                .replace(`{${"end"}}`, encodeURIComponent(String(end !== undefined ? end : `-end-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/metrics/unique-devices/{project}/{access-site}/{granularity}/{start}/{end}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UniqueDevicesDataApi - functional programming interface
 * @export
 */
export const UniqueDevicesDataApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UniqueDevicesDataApiAxiosParamCreator(configuration)
    return {
        /**
         * Given a project and a date range, returns a timeseries of unique devices counts. You need to specify a project, and can filter by accessed site (mobile or desktop). You can choose between daily and hourly granularity as well.  - Stability: [stable](https://www.mediawiki.org/wiki/API_versioning#Stable) - Rate limit: 100 req/s - License: Data accessible via this endpoint is available under the   [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/). 
         * @summary Get unique devices count per project
         * @param {UniqueDevicesDataApiGetByProjectAndDateRangeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getByProjectAndDateRange(requestParameters: UniqueDevicesDataApiGetByProjectAndDateRangeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getByProjectAndDateRange(requestParameters.project, requestParameters.accessSite, requestParameters.granularity, requestParameters.start, requestParameters.end, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UniqueDevicesDataApi - factory interface
 * @export
 */
export const UniqueDevicesDataApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UniqueDevicesDataApiFp(configuration)
    return {
        /**
         * Given a project and a date range, returns a timeseries of unique devices counts. You need to specify a project, and can filter by accessed site (mobile or desktop). You can choose between daily and hourly granularity as well.  - Stability: [stable](https://www.mediawiki.org/wiki/API_versioning#Stable) - Rate limit: 100 req/s - License: Data accessible via this endpoint is available under the   [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/). 
         * @summary Get unique devices count per project
         * @param {UniqueDevicesDataApiGetByProjectAndDateRangeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByProjectAndDateRange(requestParameters: UniqueDevicesDataApiGetByProjectAndDateRangeRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getByProjectAndDateRange(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getByProjectAndDateRange operation in UniqueDevicesDataApi.
 * @export
 * @interface UniqueDevicesDataApiGetByProjectAndDateRangeRequest
 */
export type UniqueDevicesDataApiGetByProjectAndDateRangeRequest = {
    
    /**
    * If you want to filter by project, use the domain of any Wikimedia project, for example \'en.wikipedia.org\', \'www.mediawiki.org\' or \'commons.wikimedia.org\'. 
    * @type {string}
    * @memberof UniqueDevicesDataApiGetByProjectAndDateRange
    */
    readonly project: string
    
    /**
    * If you want to filter by accessed site, use one of desktop-site or mobile-site. If you are interested in unique devices regardless of accessed site, use or all-sites. 
    * @type {'all-sites' | 'desktop-site' | 'mobile-site'}
    * @memberof UniqueDevicesDataApiGetByProjectAndDateRange
    */
    readonly accessSite: 'all-sites' | 'desktop-site' | 'mobile-site'
    
    /**
    * The time unit for the response data. As of today, the supported granularities for this endpoint are daily and monthly. 
    * @type {'daily' | 'monthly'}
    * @memberof UniqueDevicesDataApiGetByProjectAndDateRange
    */
    readonly granularity: 'daily' | 'monthly'
    
    /**
    * The timestamp of the first day/month to include, in YYYYMMDD format
    * @type {string}
    * @memberof UniqueDevicesDataApiGetByProjectAndDateRange
    */
    readonly start: string
    
    /**
    * The timestamp of the last day/month to include, in YYYYMMDD format
    * @type {string}
    * @memberof UniqueDevicesDataApiGetByProjectAndDateRange
    */
    readonly end: string
    
}

/**
 * UniqueDevicesDataApiGenerated - object-oriented interface
 * @export
 * @class UniqueDevicesDataApiGenerated
 * @extends {BaseAPI}
 */
export class UniqueDevicesDataApiGenerated extends BaseAPI {
    /**
     * Given a project and a date range, returns a timeseries of unique devices counts. You need to specify a project, and can filter by accessed site (mobile or desktop). You can choose between daily and hourly granularity as well.  - Stability: [stable](https://www.mediawiki.org/wiki/API_versioning#Stable) - Rate limit: 100 req/s - License: Data accessible via this endpoint is available under the   [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/). 
     * @summary Get unique devices count per project
     * @param {UniqueDevicesDataApiGetByProjectAndDateRangeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UniqueDevicesDataApiGenerated
     */
    public getByProjectAndDateRange(requestParameters: UniqueDevicesDataApiGetByProjectAndDateRangeRequest, options?: AxiosRequestConfig) {
        return UniqueDevicesDataApiFp(this.configuration).getByProjectAndDateRange(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
