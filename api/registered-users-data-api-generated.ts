/* tslint:disable */
/* eslint-disable */
/*
Wikimedia

This API provides cacheable and straightforward access to Wikimedia content and data, in machine-readable formats.
### Global Rules
- Limit your clients to no more than 200 requests/s to this API.
  Each API endpoint's documentation may detail more specific usage limits.
- Set a unique `User-Agent` or `Api-User-Agent` header that
  allows us to contact you quickly. Email addresses or URLs
  of contact pages work well.

By using this API, you agree to Wikimedia's  [Terms of Use](https://wikimediafoundation.org/wiki/Terms_of_Use) and [Privacy Policy](https://wikimediafoundation.org/wiki/Privacy_policy). Unless otherwise specified in the endpoint documentation below, content accessed via this API is licensed under the [CC-BY-SA 3.0](https://creativecommons.org/licenses/by-sa/3.0/)  and [GFDL](https://www.gnu.org/copyleft/fdl.html) licenses, and you irrevocably agree to release modifications or additions made through this API under these licenses.  See https://www.mediawiki.org/wiki/REST_API for background and details.
### Endpoint documentation
Please consult each endpoint's documentation for details on:
- Licensing information for the specific type of content
  and data served via the endpoint.
- Stability markers to inform you about development status and
  change policy, according to
  [our API version policy](https://www.mediawiki.org/wiki/API_versioning).
- Endpoint specific usage limits.


The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { NewRegisteredUsers } from '../models';
// @ts-ignore
import { Problem } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * RegisteredUsersDataApi - axios parameter creator
 * @export
 */
export const RegisteredUsersDataApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Given a Mediawiki project and a date range, returns a timeseries of its newly registered users counts. You can choose between daily and monthly granularity. The newly registered users value is computed with self-created users only, not auto-login created ones.  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental) - Rate limit: 25 req/s - License: Data accessible via this endpoint is available under the   [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/). 
         * @summary Get newly registered users counts for a project.
         * @param {string} project The name of any Wikimedia project formatted like {language code}.{project name}, for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped off.  For projects like commons without language codes, use commons.wikimedia. For projects like www.mediawiki.org, you can use that full string, or just use mediawiki or mediawiki.org. If you\&#39;re interested in the aggregation of all projects, use all. 
         * @param {'daily' | 'monthly'} granularity The time unit for the response data. As of today, supported values are daily and monthly. 
         * @param {string} start The date of the first day to include, in YYYYMMDD format
         * @param {string} end The date of the last day to include, in YYYYMMDD format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNewUserCountsByProjectAndDateRange: async (project: string, granularity: 'daily' | 'monthly', start: string, end: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'project' is not null or undefined
            assertParamExists('getNewUserCountsByProjectAndDateRange', 'project', project)
            // verify required parameter 'granularity' is not null or undefined
            assertParamExists('getNewUserCountsByProjectAndDateRange', 'granularity', granularity)
            // verify required parameter 'start' is not null or undefined
            assertParamExists('getNewUserCountsByProjectAndDateRange', 'start', start)
            // verify required parameter 'end' is not null or undefined
            assertParamExists('getNewUserCountsByProjectAndDateRange', 'end', end)
            const localVarPath = `/metrics/registered-users/new/{project}/{granularity}/{start}/{end}`
                .replace(`{${"project"}}`, encodeURIComponent(String(project !== undefined ? project : `-project-`)))
                .replace(`{${"granularity"}}`, encodeURIComponent(String(granularity !== undefined ? granularity : `-granularity-`)))
                .replace(`{${"start"}}`, encodeURIComponent(String(start !== undefined ? start : `-start-`)))
                .replace(`{${"end"}}`, encodeURIComponent(String(end !== undefined ? end : `-end-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/metrics/registered-users/new/{project}/{granularity}/{start}/{end}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RegisteredUsersDataApi - functional programming interface
 * @export
 */
export const RegisteredUsersDataApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RegisteredUsersDataApiAxiosParamCreator(configuration)
    return {
        /**
         * Given a Mediawiki project and a date range, returns a timeseries of its newly registered users counts. You can choose between daily and monthly granularity. The newly registered users value is computed with self-created users only, not auto-login created ones.  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental) - Rate limit: 25 req/s - License: Data accessible via this endpoint is available under the   [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/). 
         * @summary Get newly registered users counts for a project.
         * @param {RegisteredUsersDataApiGetNewUserCountsByProjectAndDateRangeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNewUserCountsByProjectAndDateRange(requestParameters: RegisteredUsersDataApiGetNewUserCountsByProjectAndDateRangeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNewUserCountsByProjectAndDateRange(requestParameters.project, requestParameters.granularity, requestParameters.start, requestParameters.end, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RegisteredUsersDataApi - factory interface
 * @export
 */
export const RegisteredUsersDataApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RegisteredUsersDataApiFp(configuration)
    return {
        /**
         * Given a Mediawiki project and a date range, returns a timeseries of its newly registered users counts. You can choose between daily and monthly granularity. The newly registered users value is computed with self-created users only, not auto-login created ones.  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental) - Rate limit: 25 req/s - License: Data accessible via this endpoint is available under the   [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/). 
         * @summary Get newly registered users counts for a project.
         * @param {RegisteredUsersDataApiGetNewUserCountsByProjectAndDateRangeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNewUserCountsByProjectAndDateRange(requestParameters: RegisteredUsersDataApiGetNewUserCountsByProjectAndDateRangeRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getNewUserCountsByProjectAndDateRange(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getNewUserCountsByProjectAndDateRange operation in RegisteredUsersDataApi.
 * @export
 * @interface RegisteredUsersDataApiGetNewUserCountsByProjectAndDateRangeRequest
 */
export type RegisteredUsersDataApiGetNewUserCountsByProjectAndDateRangeRequest = {
    
    /**
    * The name of any Wikimedia project formatted like {language code}.{project name}, for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped off.  For projects like commons without language codes, use commons.wikimedia. For projects like www.mediawiki.org, you can use that full string, or just use mediawiki or mediawiki.org. If you\'re interested in the aggregation of all projects, use all. 
    * @type {string}
    * @memberof RegisteredUsersDataApiGetNewUserCountsByProjectAndDateRange
    */
    readonly project: string
    
    /**
    * The time unit for the response data. As of today, supported values are daily and monthly. 
    * @type {'daily' | 'monthly'}
    * @memberof RegisteredUsersDataApiGetNewUserCountsByProjectAndDateRange
    */
    readonly granularity: 'daily' | 'monthly'
    
    /**
    * The date of the first day to include, in YYYYMMDD format
    * @type {string}
    * @memberof RegisteredUsersDataApiGetNewUserCountsByProjectAndDateRange
    */
    readonly start: string
    
    /**
    * The date of the last day to include, in YYYYMMDD format
    * @type {string}
    * @memberof RegisteredUsersDataApiGetNewUserCountsByProjectAndDateRange
    */
    readonly end: string
    
}

/**
 * RegisteredUsersDataApiGenerated - object-oriented interface
 * @export
 * @class RegisteredUsersDataApiGenerated
 * @extends {BaseAPI}
 */
export class RegisteredUsersDataApiGenerated extends BaseAPI {
    /**
     * Given a Mediawiki project and a date range, returns a timeseries of its newly registered users counts. You can choose between daily and monthly granularity. The newly registered users value is computed with self-created users only, not auto-login created ones.  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental) - Rate limit: 25 req/s - License: Data accessible via this endpoint is available under the   [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/). 
     * @summary Get newly registered users counts for a project.
     * @param {RegisteredUsersDataApiGetNewUserCountsByProjectAndDateRangeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegisteredUsersDataApiGenerated
     */
    public getNewUserCountsByProjectAndDateRange(requestParameters: RegisteredUsersDataApiGetNewUserCountsByProjectAndDateRangeRequest, options?: AxiosRequestConfig) {
        return RegisteredUsersDataApiFp(this.configuration).getNewUserCountsByProjectAndDateRange(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
