/* tslint:disable */
/* eslint-disable */
/*
Wikimedia

This API provides cacheable and straightforward access to Wikimedia content and data, in machine-readable formats.
### Global Rules
- Limit your clients to no more than 200 requests/s to this API.
  Each API endpoint's documentation may detail more specific usage limits.
- Set a unique `User-Agent` or `Api-User-Agent` header that
  allows us to contact you quickly. Email addresses or URLs
  of contact pages work well.

By using this API, you agree to Wikimedia's  [Terms of Use](https://wikimediafoundation.org/wiki/Terms_of_Use) and [Privacy Policy](https://wikimediafoundation.org/wiki/Privacy_policy). Unless otherwise specified in the endpoint documentation below, content accessed via this API is licensed under the [CC-BY-SA 3.0](https://creativecommons.org/licenses/by-sa/3.0/)  and [GFDL](https://www.gnu.org/copyleft/fdl.html) licenses, and you irrevocably agree to release modifications or additions made through this API under these licenses.  See https://www.mediawiki.org/wiki/REST_API for background and details.
### Endpoint documentation
Please consult each endpoint's documentation for details on:
- Licensing information for the specific type of content
  and data served via the endpoint.
- Stability markers to inform you about development status and
  change policy, according to
  [our API version policy](https://www.mediawiki.org/wiki/API_versioning).
- Endpoint specific usage limits.


The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Availability } from '../models';
// @ts-ignore
import { Problem } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * FeedContentAvailabilityApi - axios parameter creator
 * @export
 */
export const FeedContentAvailabilityApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Gets availability of featured feed content for the apps by wiki domain.  Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental) 
         * @summary Gets availability of featured feed content for the apps by wiki domain.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByWikiDomain: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/feed/availability`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/feed/availability',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FeedContentAvailabilityApi - functional programming interface
 * @export
 */
export const FeedContentAvailabilityApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FeedContentAvailabilityApiAxiosParamCreator(configuration)
    return {
        /**
         * Gets availability of featured feed content for the apps by wiki domain.  Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental) 
         * @summary Gets availability of featured feed content for the apps by wiki domain.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getByWikiDomain(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Availability>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getByWikiDomain(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FeedContentAvailabilityApi - factory interface
 * @export
 */
export const FeedContentAvailabilityApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FeedContentAvailabilityApiFp(configuration)
    return {
        /**
         * Gets availability of featured feed content for the apps by wiki domain.  Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental) 
         * @summary Gets availability of featured feed content for the apps by wiki domain.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByWikiDomain(options?: AxiosRequestConfig): AxiosPromise<Availability> {
            return localVarFp.getByWikiDomain(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FeedContentAvailabilityApiGenerated - object-oriented interface
 * @export
 * @class FeedContentAvailabilityApiGenerated
 * @extends {BaseAPI}
 */
export class FeedContentAvailabilityApiGenerated extends BaseAPI {
    /**
     * Gets availability of featured feed content for the apps by wiki domain.  Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental) 
     * @summary Gets availability of featured feed content for the apps by wiki domain.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedContentAvailabilityApiGenerated
     */
    public getByWikiDomain(options?: AxiosRequestConfig) {
        return FeedContentAvailabilityApiFp(this.configuration).getByWikiDomain(options).then((request) => request(this.axios, this.basePath));
    }
}
