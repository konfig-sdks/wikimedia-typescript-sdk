/* tslint:disable */
/* eslint-disable */
/*
Wikimedia

This API provides cacheable and straightforward access to Wikimedia content and data, in machine-readable formats.
### Global Rules
- Limit your clients to no more than 200 requests/s to this API.
  Each API endpoint's documentation may detail more specific usage limits.
- Set a unique `User-Agent` or `Api-User-Agent` header that
  allows us to contact you quickly. Email addresses or URLs
  of contact pages work well.

By using this API, you agree to Wikimedia's  [Terms of Use](https://wikimediafoundation.org/wiki/Terms_of_Use) and [Privacy Policy](https://wikimediafoundation.org/wiki/Privacy_policy). Unless otherwise specified in the endpoint documentation below, content accessed via this API is licensed under the [CC-BY-SA 3.0](https://creativecommons.org/licenses/by-sa/3.0/)  and [GFDL](https://www.gnu.org/copyleft/fdl.html) licenses, and you irrevocably agree to release modifications or additions made through this API under these licenses.  See https://www.mediawiki.org/wiki/REST_API for background and details.
### Endpoint documentation
Please consult each endpoint's documentation for details on:
- Licensing information for the specific type of content
  and data served via the endpoint.
- Stability markers to inform you about development status and
  change policy, according to
  [our API version policy](https://www.mediawiki.org/wiki/API_versioning).
- Endpoint specific usage limits.


The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AbsoluteBytesDifference } from '../models';
// @ts-ignore
import { AbsoluteBytesDifferencePerPage } from '../models';
// @ts-ignore
import { NetBytesDifference } from '../models';
// @ts-ignore
import { NetBytesDifferencePerPage } from '../models';
// @ts-ignore
import { Problem } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * BytesDifferenceDataApi - axios parameter creator
 * @export
 */
export const BytesDifferenceDataApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Given a Mediawiki project and a date range, returns a timeseries of absolute bytes difference sums. You can filter by editors-type (all-editor-types, anonymous, group-bot, name-bot, user) and page-type (all-page-types, content, non-content). You can choose between daily and monthly granularity as well.  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental) - Rate limit: 25 req/s - License: Data accessible via this endpoint is available under the   [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/). 
         * @summary Get the sum of absolute value of text bytes difference between current edit and previous one. 
         * @param {string} project The name of any Wikimedia project formatted like {language code}.{project name}, for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped off. For projects like commons without language codes, use commons.wikimedia. For projects like www.mediawiki.org, you can use that full string, or just use mediawiki or mediawiki.org. If you\&#39;re interested in the aggregation of all projects, use all-projects. 
         * @param {'all-editor-types' | 'anonymous' | 'group-bot' | 'name-bot' | 'user'} editorType If you want to filter by editor-type, use one of anonymous, group-bot (registered accounts belonging to the bot group), name-bot (registered accounts not belonging to the bot group but having bot-like names) or user (registered account not in bot group nor having bot-like name). If you are interested in edits regardless of their editor-type, use all-editor-types. 
         * @param {'all-page-types' | 'content' | 'non-content'} pageType If you want to filter by page-type, use one of content (edits on pages in content namespaces) or non-content (edits on pages in non-content namespaces). If you are interested in edits regardless of their page-type, use all-page-types. 
         * @param {'daily' | 'monthly'} granularity Time unit for the response data. As of today, supported values are daily and monthly 
         * @param {string} start The date of the first day to include, in YYYYMMDD format
         * @param {string} end The date of the last day to include, in YYYYMMDD format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAbsoluteAggregateByProjectAndDateRange: async (project: string, editorType: 'all-editor-types' | 'anonymous' | 'group-bot' | 'name-bot' | 'user', pageType: 'all-page-types' | 'content' | 'non-content', granularity: 'daily' | 'monthly', start: string, end: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'project' is not null or undefined
            assertParamExists('getAbsoluteAggregateByProjectAndDateRange', 'project', project)
            // verify required parameter 'editorType' is not null or undefined
            assertParamExists('getAbsoluteAggregateByProjectAndDateRange', 'editorType', editorType)
            // verify required parameter 'pageType' is not null or undefined
            assertParamExists('getAbsoluteAggregateByProjectAndDateRange', 'pageType', pageType)
            // verify required parameter 'granularity' is not null or undefined
            assertParamExists('getAbsoluteAggregateByProjectAndDateRange', 'granularity', granularity)
            // verify required parameter 'start' is not null or undefined
            assertParamExists('getAbsoluteAggregateByProjectAndDateRange', 'start', start)
            // verify required parameter 'end' is not null or undefined
            assertParamExists('getAbsoluteAggregateByProjectAndDateRange', 'end', end)
            const localVarPath = `/metrics/bytes-difference/absolute/aggregate/{project}/{editor-type}/{page-type}/{granularity}/{start}/{end}`
                .replace(`{${"project"}}`, encodeURIComponent(String(project !== undefined ? project : `-project-`)))
                .replace(`{${"editor-type"}}`, encodeURIComponent(String(editorType !== undefined ? editorType : `-editor-type-`)))
                .replace(`{${"page-type"}}`, encodeURIComponent(String(pageType !== undefined ? pageType : `-page-type-`)))
                .replace(`{${"granularity"}}`, encodeURIComponent(String(granularity !== undefined ? granularity : `-granularity-`)))
                .replace(`{${"start"}}`, encodeURIComponent(String(start !== undefined ? start : `-start-`)))
                .replace(`{${"end"}}`, encodeURIComponent(String(end !== undefined ? end : `-end-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/metrics/bytes-difference/absolute/aggregate/{project}/{editor-type}/{page-type}/{granularity}/{start}/{end}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Given a Mediawiki project, a page-title prefixed with canonical namespace (for instance \'User:Jimbo_Wales\') and a date range, returns a timeseries of bytes difference absolute sums. You can filter by editors-type (all-editor-types, anonymous, group-bot, name-bot, user). You can choose between daily and monthly granularity as well.  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental) - Rate limit: 25 req/s - License: Data accessible via this endpoint is available under the   [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/). 
         * @summary Get the sum of absolute text bytes difference per page.
         * @param {string} project The name of any Wikimedia project formatted like {language code}.{project name}, for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped off. For projects like commons without language codes, use commons.wikimedia. For projects like www.mediawiki.org, you can use that full string, or just use mediawiki or mediawiki.org. 
         * @param {string} pageTitle The page-title to request absolute bytes-difference for. Should be prefixed with the page canonical namespace. 
         * @param {'all-editor-types' | 'anonymous' | 'group-bot' | 'name-bot' | 'user'} editorType If you want to filter by editor-type, use one of anonymous, group-bot (registered accounts belonging to the bot group), name-bot (registered accounts not belonging to the bot group but having bot-like names) or user (registered account not in bot group nor having bot-like name). If you are interested in edits regardless of their editor-type, use all-editor-types. 
         * @param {'daily' | 'monthly'} granularity Time unit for the response data. As of today, supported values are daily and monthly 
         * @param {string} start The date of the first day to include, in YYYYMMDD format
         * @param {string} end The date of the last day to include, in YYYYMMDD format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAbsolutePerPage: async (project: string, pageTitle: string, editorType: 'all-editor-types' | 'anonymous' | 'group-bot' | 'name-bot' | 'user', granularity: 'daily' | 'monthly', start: string, end: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'project' is not null or undefined
            assertParamExists('getAbsolutePerPage', 'project', project)
            // verify required parameter 'pageTitle' is not null or undefined
            assertParamExists('getAbsolutePerPage', 'pageTitle', pageTitle)
            // verify required parameter 'editorType' is not null or undefined
            assertParamExists('getAbsolutePerPage', 'editorType', editorType)
            // verify required parameter 'granularity' is not null or undefined
            assertParamExists('getAbsolutePerPage', 'granularity', granularity)
            // verify required parameter 'start' is not null or undefined
            assertParamExists('getAbsolutePerPage', 'start', start)
            // verify required parameter 'end' is not null or undefined
            assertParamExists('getAbsolutePerPage', 'end', end)
            const localVarPath = `/metrics/bytes-difference/absolute/per-page/{project}/{page-title}/{editor-type}/{granularity}/{start}/{end}`
                .replace(`{${"project"}}`, encodeURIComponent(String(project !== undefined ? project : `-project-`)))
                .replace(`{${"page-title"}}`, encodeURIComponent(String(pageTitle !== undefined ? pageTitle : `-page-title-`)))
                .replace(`{${"editor-type"}}`, encodeURIComponent(String(editorType !== undefined ? editorType : `-editor-type-`)))
                .replace(`{${"granularity"}}`, encodeURIComponent(String(granularity !== undefined ? granularity : `-granularity-`)))
                .replace(`{${"start"}}`, encodeURIComponent(String(start !== undefined ? start : `-start-`)))
                .replace(`{${"end"}}`, encodeURIComponent(String(end !== undefined ? end : `-end-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/metrics/bytes-difference/absolute/per-page/{project}/{page-title}/{editor-type}/{granularity}/{start}/{end}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Given a Mediawiki project and a date range, returns a timeseries of bytes difference net sums. You can filter by editors-type (all-editor-types, anonymous, group-bot, name-bot, user) and page-type (all-page-types, content or non-content). You can choose between daily and monthly granularity as well.  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental) - Rate limit: 25 req/s - License: Data accessible via this endpoint is available under the   [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/). 
         * @summary Get the sum of net text bytes difference between current edit and previous one.
         * @param {string} project The name of any Wikimedia project formatted like {language code}.{project name}, for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped off. For projects like commons without language codes, use commons.wikimedia. For projects like www.mediawiki.org, you can use that full string, or just use mediawiki or mediawiki.org. If you\&#39;re interested in the aggregation of all projects, use all-projects. 
         * @param {'all-editor-types' | 'anonymous' | 'group-bot' | 'name-bot' | 'user'} editorType If you want to filter by editor-type, use one of anonymous, group-bot (registered accounts belonging to the bot group), name-bot (registered accounts not belonging to the bot group but having bot-like names) or user (registered account not in bot group nor having bot-like name). If you are interested in edits regardless of their editor-type, use all-editor-types. 
         * @param {'all-page-types' | 'content' | 'non-content'} pageType If you want to filter by page-type, use one of content (edits on pages in content namespaces) or non-content (edits on pages in non-content namespaces). If you are interested in edits regardless of their page-type, use all-page-types. 
         * @param {'daily' | 'monthly'} granularity Time unit for the response data. As of today, supported values are daily and monthly 
         * @param {string} start The date of the first day to include, in YYYYMMDD format
         * @param {string} end The date of the last day to include, in YYYYMMDD format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNetAggregateByProjectAndDateRange: async (project: string, editorType: 'all-editor-types' | 'anonymous' | 'group-bot' | 'name-bot' | 'user', pageType: 'all-page-types' | 'content' | 'non-content', granularity: 'daily' | 'monthly', start: string, end: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'project' is not null or undefined
            assertParamExists('getNetAggregateByProjectAndDateRange', 'project', project)
            // verify required parameter 'editorType' is not null or undefined
            assertParamExists('getNetAggregateByProjectAndDateRange', 'editorType', editorType)
            // verify required parameter 'pageType' is not null or undefined
            assertParamExists('getNetAggregateByProjectAndDateRange', 'pageType', pageType)
            // verify required parameter 'granularity' is not null or undefined
            assertParamExists('getNetAggregateByProjectAndDateRange', 'granularity', granularity)
            // verify required parameter 'start' is not null or undefined
            assertParamExists('getNetAggregateByProjectAndDateRange', 'start', start)
            // verify required parameter 'end' is not null or undefined
            assertParamExists('getNetAggregateByProjectAndDateRange', 'end', end)
            const localVarPath = `/metrics/bytes-difference/net/aggregate/{project}/{editor-type}/{page-type}/{granularity}/{start}/{end}`
                .replace(`{${"project"}}`, encodeURIComponent(String(project !== undefined ? project : `-project-`)))
                .replace(`{${"editor-type"}}`, encodeURIComponent(String(editorType !== undefined ? editorType : `-editor-type-`)))
                .replace(`{${"page-type"}}`, encodeURIComponent(String(pageType !== undefined ? pageType : `-page-type-`)))
                .replace(`{${"granularity"}}`, encodeURIComponent(String(granularity !== undefined ? granularity : `-granularity-`)))
                .replace(`{${"start"}}`, encodeURIComponent(String(start !== undefined ? start : `-start-`)))
                .replace(`{${"end"}}`, encodeURIComponent(String(end !== undefined ? end : `-end-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/metrics/bytes-difference/net/aggregate/{project}/{editor-type}/{page-type}/{granularity}/{start}/{end}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Given a Mediawiki project, a page-title prefixed with canonical namespace (for instance \'User:Jimbo_Wales\') and a date range, returns a timeseries of bytes difference net sums. You can filter by editors-type (all-editor-types, anonymous, group-bot, name-bot, user). You can choose between daily and monthly granularity as well.  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental) - Rate limit: 25 req/s - License: Data accessible via this endpoint is available under the   [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/). 
         * @summary Get the sum of net text bytes difference per page.
         * @param {string} project The name of any Wikimedia project formatted like {language code}.{project name}, for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped off. For projects like commons without language codes, use commons.wikimedia. For projects like www.mediawiki.org, you can use that full string, or just use mediawiki or mediawiki.org. 
         * @param {string} pageTitle The page-title to request net bytes-difference for. Should be prefixed with the page canonical namespace. 
         * @param {'all-editor-types' | 'anonymous' | 'group-bot' | 'name-bot' | 'user'} editorType If you want to filter by editor-type, use one of anonymous, group-bot (registered accounts belonging to the bot group), name-bot (registered accounts not belonging to the bot group but having bot-like names) or user (registered account not in bot group nor having bot-like name). If you are interested in edits regardless of their editor-type, use all-editor-types. 
         * @param {'daily' | 'monthly'} granularity Time unit for the response data. As of today, supported values are daily and monthly 
         * @param {string} start The date of the first day to include, in YYYYMMDD format
         * @param {string} end The date of the last day to include, in YYYYMMDD format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSumNetTextBytesDifferencePerPage: async (project: string, pageTitle: string, editorType: 'all-editor-types' | 'anonymous' | 'group-bot' | 'name-bot' | 'user', granularity: 'daily' | 'monthly', start: string, end: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'project' is not null or undefined
            assertParamExists('getSumNetTextBytesDifferencePerPage', 'project', project)
            // verify required parameter 'pageTitle' is not null or undefined
            assertParamExists('getSumNetTextBytesDifferencePerPage', 'pageTitle', pageTitle)
            // verify required parameter 'editorType' is not null or undefined
            assertParamExists('getSumNetTextBytesDifferencePerPage', 'editorType', editorType)
            // verify required parameter 'granularity' is not null or undefined
            assertParamExists('getSumNetTextBytesDifferencePerPage', 'granularity', granularity)
            // verify required parameter 'start' is not null or undefined
            assertParamExists('getSumNetTextBytesDifferencePerPage', 'start', start)
            // verify required parameter 'end' is not null or undefined
            assertParamExists('getSumNetTextBytesDifferencePerPage', 'end', end)
            const localVarPath = `/metrics/bytes-difference/net/per-page/{project}/{page-title}/{editor-type}/{granularity}/{start}/{end}`
                .replace(`{${"project"}}`, encodeURIComponent(String(project !== undefined ? project : `-project-`)))
                .replace(`{${"page-title"}}`, encodeURIComponent(String(pageTitle !== undefined ? pageTitle : `-page-title-`)))
                .replace(`{${"editor-type"}}`, encodeURIComponent(String(editorType !== undefined ? editorType : `-editor-type-`)))
                .replace(`{${"granularity"}}`, encodeURIComponent(String(granularity !== undefined ? granularity : `-granularity-`)))
                .replace(`{${"start"}}`, encodeURIComponent(String(start !== undefined ? start : `-start-`)))
                .replace(`{${"end"}}`, encodeURIComponent(String(end !== undefined ? end : `-end-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/metrics/bytes-difference/net/per-page/{project}/{page-title}/{editor-type}/{granularity}/{start}/{end}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BytesDifferenceDataApi - functional programming interface
 * @export
 */
export const BytesDifferenceDataApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BytesDifferenceDataApiAxiosParamCreator(configuration)
    return {
        /**
         * Given a Mediawiki project and a date range, returns a timeseries of absolute bytes difference sums. You can filter by editors-type (all-editor-types, anonymous, group-bot, name-bot, user) and page-type (all-page-types, content, non-content). You can choose between daily and monthly granularity as well.  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental) - Rate limit: 25 req/s - License: Data accessible via this endpoint is available under the   [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/). 
         * @summary Get the sum of absolute value of text bytes difference between current edit and previous one. 
         * @param {BytesDifferenceDataApiGetAbsoluteAggregateByProjectAndDateRangeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAbsoluteAggregateByProjectAndDateRange(requestParameters: BytesDifferenceDataApiGetAbsoluteAggregateByProjectAndDateRangeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAbsoluteAggregateByProjectAndDateRange(requestParameters.project, requestParameters.editorType, requestParameters.pageType, requestParameters.granularity, requestParameters.start, requestParameters.end, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Given a Mediawiki project, a page-title prefixed with canonical namespace (for instance \'User:Jimbo_Wales\') and a date range, returns a timeseries of bytes difference absolute sums. You can filter by editors-type (all-editor-types, anonymous, group-bot, name-bot, user). You can choose between daily and monthly granularity as well.  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental) - Rate limit: 25 req/s - License: Data accessible via this endpoint is available under the   [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/). 
         * @summary Get the sum of absolute text bytes difference per page.
         * @param {BytesDifferenceDataApiGetAbsolutePerPageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAbsolutePerPage(requestParameters: BytesDifferenceDataApiGetAbsolutePerPageRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAbsolutePerPage(requestParameters.project, requestParameters.pageTitle, requestParameters.editorType, requestParameters.granularity, requestParameters.start, requestParameters.end, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Given a Mediawiki project and a date range, returns a timeseries of bytes difference net sums. You can filter by editors-type (all-editor-types, anonymous, group-bot, name-bot, user) and page-type (all-page-types, content or non-content). You can choose between daily and monthly granularity as well.  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental) - Rate limit: 25 req/s - License: Data accessible via this endpoint is available under the   [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/). 
         * @summary Get the sum of net text bytes difference between current edit and previous one.
         * @param {BytesDifferenceDataApiGetNetAggregateByProjectAndDateRangeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNetAggregateByProjectAndDateRange(requestParameters: BytesDifferenceDataApiGetNetAggregateByProjectAndDateRangeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNetAggregateByProjectAndDateRange(requestParameters.project, requestParameters.editorType, requestParameters.pageType, requestParameters.granularity, requestParameters.start, requestParameters.end, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Given a Mediawiki project, a page-title prefixed with canonical namespace (for instance \'User:Jimbo_Wales\') and a date range, returns a timeseries of bytes difference net sums. You can filter by editors-type (all-editor-types, anonymous, group-bot, name-bot, user). You can choose between daily and monthly granularity as well.  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental) - Rate limit: 25 req/s - License: Data accessible via this endpoint is available under the   [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/). 
         * @summary Get the sum of net text bytes difference per page.
         * @param {BytesDifferenceDataApiGetSumNetTextBytesDifferencePerPageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSumNetTextBytesDifferencePerPage(requestParameters: BytesDifferenceDataApiGetSumNetTextBytesDifferencePerPageRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSumNetTextBytesDifferencePerPage(requestParameters.project, requestParameters.pageTitle, requestParameters.editorType, requestParameters.granularity, requestParameters.start, requestParameters.end, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BytesDifferenceDataApi - factory interface
 * @export
 */
export const BytesDifferenceDataApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BytesDifferenceDataApiFp(configuration)
    return {
        /**
         * Given a Mediawiki project and a date range, returns a timeseries of absolute bytes difference sums. You can filter by editors-type (all-editor-types, anonymous, group-bot, name-bot, user) and page-type (all-page-types, content, non-content). You can choose between daily and monthly granularity as well.  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental) - Rate limit: 25 req/s - License: Data accessible via this endpoint is available under the   [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/). 
         * @summary Get the sum of absolute value of text bytes difference between current edit and previous one. 
         * @param {BytesDifferenceDataApiGetAbsoluteAggregateByProjectAndDateRangeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAbsoluteAggregateByProjectAndDateRange(requestParameters: BytesDifferenceDataApiGetAbsoluteAggregateByProjectAndDateRangeRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getAbsoluteAggregateByProjectAndDateRange(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Given a Mediawiki project, a page-title prefixed with canonical namespace (for instance \'User:Jimbo_Wales\') and a date range, returns a timeseries of bytes difference absolute sums. You can filter by editors-type (all-editor-types, anonymous, group-bot, name-bot, user). You can choose between daily and monthly granularity as well.  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental) - Rate limit: 25 req/s - License: Data accessible via this endpoint is available under the   [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/). 
         * @summary Get the sum of absolute text bytes difference per page.
         * @param {BytesDifferenceDataApiGetAbsolutePerPageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAbsolutePerPage(requestParameters: BytesDifferenceDataApiGetAbsolutePerPageRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getAbsolutePerPage(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Given a Mediawiki project and a date range, returns a timeseries of bytes difference net sums. You can filter by editors-type (all-editor-types, anonymous, group-bot, name-bot, user) and page-type (all-page-types, content or non-content). You can choose between daily and monthly granularity as well.  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental) - Rate limit: 25 req/s - License: Data accessible via this endpoint is available under the   [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/). 
         * @summary Get the sum of net text bytes difference between current edit and previous one.
         * @param {BytesDifferenceDataApiGetNetAggregateByProjectAndDateRangeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNetAggregateByProjectAndDateRange(requestParameters: BytesDifferenceDataApiGetNetAggregateByProjectAndDateRangeRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getNetAggregateByProjectAndDateRange(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Given a Mediawiki project, a page-title prefixed with canonical namespace (for instance \'User:Jimbo_Wales\') and a date range, returns a timeseries of bytes difference net sums. You can filter by editors-type (all-editor-types, anonymous, group-bot, name-bot, user). You can choose between daily and monthly granularity as well.  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental) - Rate limit: 25 req/s - License: Data accessible via this endpoint is available under the   [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/). 
         * @summary Get the sum of net text bytes difference per page.
         * @param {BytesDifferenceDataApiGetSumNetTextBytesDifferencePerPageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSumNetTextBytesDifferencePerPage(requestParameters: BytesDifferenceDataApiGetSumNetTextBytesDifferencePerPageRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getSumNetTextBytesDifferencePerPage(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getAbsoluteAggregateByProjectAndDateRange operation in BytesDifferenceDataApi.
 * @export
 * @interface BytesDifferenceDataApiGetAbsoluteAggregateByProjectAndDateRangeRequest
 */
export type BytesDifferenceDataApiGetAbsoluteAggregateByProjectAndDateRangeRequest = {
    
    /**
    * The name of any Wikimedia project formatted like {language code}.{project name}, for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped off. For projects like commons without language codes, use commons.wikimedia. For projects like www.mediawiki.org, you can use that full string, or just use mediawiki or mediawiki.org. If you\'re interested in the aggregation of all projects, use all-projects. 
    * @type {string}
    * @memberof BytesDifferenceDataApiGetAbsoluteAggregateByProjectAndDateRange
    */
    readonly project: string
    
    /**
    * If you want to filter by editor-type, use one of anonymous, group-bot (registered accounts belonging to the bot group), name-bot (registered accounts not belonging to the bot group but having bot-like names) or user (registered account not in bot group nor having bot-like name). If you are interested in edits regardless of their editor-type, use all-editor-types. 
    * @type {'all-editor-types' | 'anonymous' | 'group-bot' | 'name-bot' | 'user'}
    * @memberof BytesDifferenceDataApiGetAbsoluteAggregateByProjectAndDateRange
    */
    readonly editorType: 'all-editor-types' | 'anonymous' | 'group-bot' | 'name-bot' | 'user'
    
    /**
    * If you want to filter by page-type, use one of content (edits on pages in content namespaces) or non-content (edits on pages in non-content namespaces). If you are interested in edits regardless of their page-type, use all-page-types. 
    * @type {'all-page-types' | 'content' | 'non-content'}
    * @memberof BytesDifferenceDataApiGetAbsoluteAggregateByProjectAndDateRange
    */
    readonly pageType: 'all-page-types' | 'content' | 'non-content'
    
    /**
    * Time unit for the response data. As of today, supported values are daily and monthly 
    * @type {'daily' | 'monthly'}
    * @memberof BytesDifferenceDataApiGetAbsoluteAggregateByProjectAndDateRange
    */
    readonly granularity: 'daily' | 'monthly'
    
    /**
    * The date of the first day to include, in YYYYMMDD format
    * @type {string}
    * @memberof BytesDifferenceDataApiGetAbsoluteAggregateByProjectAndDateRange
    */
    readonly start: string
    
    /**
    * The date of the last day to include, in YYYYMMDD format
    * @type {string}
    * @memberof BytesDifferenceDataApiGetAbsoluteAggregateByProjectAndDateRange
    */
    readonly end: string
    
}

/**
 * Request parameters for getAbsolutePerPage operation in BytesDifferenceDataApi.
 * @export
 * @interface BytesDifferenceDataApiGetAbsolutePerPageRequest
 */
export type BytesDifferenceDataApiGetAbsolutePerPageRequest = {
    
    /**
    * The name of any Wikimedia project formatted like {language code}.{project name}, for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped off. For projects like commons without language codes, use commons.wikimedia. For projects like www.mediawiki.org, you can use that full string, or just use mediawiki or mediawiki.org. 
    * @type {string}
    * @memberof BytesDifferenceDataApiGetAbsolutePerPage
    */
    readonly project: string
    
    /**
    * The page-title to request absolute bytes-difference for. Should be prefixed with the page canonical namespace. 
    * @type {string}
    * @memberof BytesDifferenceDataApiGetAbsolutePerPage
    */
    readonly pageTitle: string
    
    /**
    * If you want to filter by editor-type, use one of anonymous, group-bot (registered accounts belonging to the bot group), name-bot (registered accounts not belonging to the bot group but having bot-like names) or user (registered account not in bot group nor having bot-like name). If you are interested in edits regardless of their editor-type, use all-editor-types. 
    * @type {'all-editor-types' | 'anonymous' | 'group-bot' | 'name-bot' | 'user'}
    * @memberof BytesDifferenceDataApiGetAbsolutePerPage
    */
    readonly editorType: 'all-editor-types' | 'anonymous' | 'group-bot' | 'name-bot' | 'user'
    
    /**
    * Time unit for the response data. As of today, supported values are daily and monthly 
    * @type {'daily' | 'monthly'}
    * @memberof BytesDifferenceDataApiGetAbsolutePerPage
    */
    readonly granularity: 'daily' | 'monthly'
    
    /**
    * The date of the first day to include, in YYYYMMDD format
    * @type {string}
    * @memberof BytesDifferenceDataApiGetAbsolutePerPage
    */
    readonly start: string
    
    /**
    * The date of the last day to include, in YYYYMMDD format
    * @type {string}
    * @memberof BytesDifferenceDataApiGetAbsolutePerPage
    */
    readonly end: string
    
}

/**
 * Request parameters for getNetAggregateByProjectAndDateRange operation in BytesDifferenceDataApi.
 * @export
 * @interface BytesDifferenceDataApiGetNetAggregateByProjectAndDateRangeRequest
 */
export type BytesDifferenceDataApiGetNetAggregateByProjectAndDateRangeRequest = {
    
    /**
    * The name of any Wikimedia project formatted like {language code}.{project name}, for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped off. For projects like commons without language codes, use commons.wikimedia. For projects like www.mediawiki.org, you can use that full string, or just use mediawiki or mediawiki.org. If you\'re interested in the aggregation of all projects, use all-projects. 
    * @type {string}
    * @memberof BytesDifferenceDataApiGetNetAggregateByProjectAndDateRange
    */
    readonly project: string
    
    /**
    * If you want to filter by editor-type, use one of anonymous, group-bot (registered accounts belonging to the bot group), name-bot (registered accounts not belonging to the bot group but having bot-like names) or user (registered account not in bot group nor having bot-like name). If you are interested in edits regardless of their editor-type, use all-editor-types. 
    * @type {'all-editor-types' | 'anonymous' | 'group-bot' | 'name-bot' | 'user'}
    * @memberof BytesDifferenceDataApiGetNetAggregateByProjectAndDateRange
    */
    readonly editorType: 'all-editor-types' | 'anonymous' | 'group-bot' | 'name-bot' | 'user'
    
    /**
    * If you want to filter by page-type, use one of content (edits on pages in content namespaces) or non-content (edits on pages in non-content namespaces). If you are interested in edits regardless of their page-type, use all-page-types. 
    * @type {'all-page-types' | 'content' | 'non-content'}
    * @memberof BytesDifferenceDataApiGetNetAggregateByProjectAndDateRange
    */
    readonly pageType: 'all-page-types' | 'content' | 'non-content'
    
    /**
    * Time unit for the response data. As of today, supported values are daily and monthly 
    * @type {'daily' | 'monthly'}
    * @memberof BytesDifferenceDataApiGetNetAggregateByProjectAndDateRange
    */
    readonly granularity: 'daily' | 'monthly'
    
    /**
    * The date of the first day to include, in YYYYMMDD format
    * @type {string}
    * @memberof BytesDifferenceDataApiGetNetAggregateByProjectAndDateRange
    */
    readonly start: string
    
    /**
    * The date of the last day to include, in YYYYMMDD format
    * @type {string}
    * @memberof BytesDifferenceDataApiGetNetAggregateByProjectAndDateRange
    */
    readonly end: string
    
}

/**
 * Request parameters for getSumNetTextBytesDifferencePerPage operation in BytesDifferenceDataApi.
 * @export
 * @interface BytesDifferenceDataApiGetSumNetTextBytesDifferencePerPageRequest
 */
export type BytesDifferenceDataApiGetSumNetTextBytesDifferencePerPageRequest = {
    
    /**
    * The name of any Wikimedia project formatted like {language code}.{project name}, for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped off. For projects like commons without language codes, use commons.wikimedia. For projects like www.mediawiki.org, you can use that full string, or just use mediawiki or mediawiki.org. 
    * @type {string}
    * @memberof BytesDifferenceDataApiGetSumNetTextBytesDifferencePerPage
    */
    readonly project: string
    
    /**
    * The page-title to request net bytes-difference for. Should be prefixed with the page canonical namespace. 
    * @type {string}
    * @memberof BytesDifferenceDataApiGetSumNetTextBytesDifferencePerPage
    */
    readonly pageTitle: string
    
    /**
    * If you want to filter by editor-type, use one of anonymous, group-bot (registered accounts belonging to the bot group), name-bot (registered accounts not belonging to the bot group but having bot-like names) or user (registered account not in bot group nor having bot-like name). If you are interested in edits regardless of their editor-type, use all-editor-types. 
    * @type {'all-editor-types' | 'anonymous' | 'group-bot' | 'name-bot' | 'user'}
    * @memberof BytesDifferenceDataApiGetSumNetTextBytesDifferencePerPage
    */
    readonly editorType: 'all-editor-types' | 'anonymous' | 'group-bot' | 'name-bot' | 'user'
    
    /**
    * Time unit for the response data. As of today, supported values are daily and monthly 
    * @type {'daily' | 'monthly'}
    * @memberof BytesDifferenceDataApiGetSumNetTextBytesDifferencePerPage
    */
    readonly granularity: 'daily' | 'monthly'
    
    /**
    * The date of the first day to include, in YYYYMMDD format
    * @type {string}
    * @memberof BytesDifferenceDataApiGetSumNetTextBytesDifferencePerPage
    */
    readonly start: string
    
    /**
    * The date of the last day to include, in YYYYMMDD format
    * @type {string}
    * @memberof BytesDifferenceDataApiGetSumNetTextBytesDifferencePerPage
    */
    readonly end: string
    
}

/**
 * BytesDifferenceDataApiGenerated - object-oriented interface
 * @export
 * @class BytesDifferenceDataApiGenerated
 * @extends {BaseAPI}
 */
export class BytesDifferenceDataApiGenerated extends BaseAPI {
    /**
     * Given a Mediawiki project and a date range, returns a timeseries of absolute bytes difference sums. You can filter by editors-type (all-editor-types, anonymous, group-bot, name-bot, user) and page-type (all-page-types, content, non-content). You can choose between daily and monthly granularity as well.  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental) - Rate limit: 25 req/s - License: Data accessible via this endpoint is available under the   [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/). 
     * @summary Get the sum of absolute value of text bytes difference between current edit and previous one. 
     * @param {BytesDifferenceDataApiGetAbsoluteAggregateByProjectAndDateRangeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BytesDifferenceDataApiGenerated
     */
    public getAbsoluteAggregateByProjectAndDateRange(requestParameters: BytesDifferenceDataApiGetAbsoluteAggregateByProjectAndDateRangeRequest, options?: AxiosRequestConfig) {
        return BytesDifferenceDataApiFp(this.configuration).getAbsoluteAggregateByProjectAndDateRange(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Given a Mediawiki project, a page-title prefixed with canonical namespace (for instance \'User:Jimbo_Wales\') and a date range, returns a timeseries of bytes difference absolute sums. You can filter by editors-type (all-editor-types, anonymous, group-bot, name-bot, user). You can choose between daily and monthly granularity as well.  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental) - Rate limit: 25 req/s - License: Data accessible via this endpoint is available under the   [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/). 
     * @summary Get the sum of absolute text bytes difference per page.
     * @param {BytesDifferenceDataApiGetAbsolutePerPageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BytesDifferenceDataApiGenerated
     */
    public getAbsolutePerPage(requestParameters: BytesDifferenceDataApiGetAbsolutePerPageRequest, options?: AxiosRequestConfig) {
        return BytesDifferenceDataApiFp(this.configuration).getAbsolutePerPage(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Given a Mediawiki project and a date range, returns a timeseries of bytes difference net sums. You can filter by editors-type (all-editor-types, anonymous, group-bot, name-bot, user) and page-type (all-page-types, content or non-content). You can choose between daily and monthly granularity as well.  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental) - Rate limit: 25 req/s - License: Data accessible via this endpoint is available under the   [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/). 
     * @summary Get the sum of net text bytes difference between current edit and previous one.
     * @param {BytesDifferenceDataApiGetNetAggregateByProjectAndDateRangeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BytesDifferenceDataApiGenerated
     */
    public getNetAggregateByProjectAndDateRange(requestParameters: BytesDifferenceDataApiGetNetAggregateByProjectAndDateRangeRequest, options?: AxiosRequestConfig) {
        return BytesDifferenceDataApiFp(this.configuration).getNetAggregateByProjectAndDateRange(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Given a Mediawiki project, a page-title prefixed with canonical namespace (for instance \'User:Jimbo_Wales\') and a date range, returns a timeseries of bytes difference net sums. You can filter by editors-type (all-editor-types, anonymous, group-bot, name-bot, user). You can choose between daily and monthly granularity as well.  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental) - Rate limit: 25 req/s - License: Data accessible via this endpoint is available under the   [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/). 
     * @summary Get the sum of net text bytes difference per page.
     * @param {BytesDifferenceDataApiGetSumNetTextBytesDifferencePerPageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BytesDifferenceDataApiGenerated
     */
    public getSumNetTextBytesDifferencePerPage(requestParameters: BytesDifferenceDataApiGetSumNetTextBytesDifferencePerPageRequest, options?: AxiosRequestConfig) {
        return BytesDifferenceDataApiFp(this.configuration).getSumNetTextBytesDifferencePerPage(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
