/* tslint:disable */
/* eslint-disable */
/*
Wikimedia

This API provides cacheable and straightforward access to Wikimedia content and data, in machine-readable formats.
### Global Rules
- Limit your clients to no more than 200 requests/s to this API.
  Each API endpoint's documentation may detail more specific usage limits.
- Set a unique `User-Agent` or `Api-User-Agent` header that
  allows us to contact you quickly. Email addresses or URLs
  of contact pages work well.

By using this API, you agree to Wikimedia's  [Terms of Use](https://wikimediafoundation.org/wiki/Terms_of_Use) and [Privacy Policy](https://wikimediafoundation.org/wiki/Privacy_policy). Unless otherwise specified in the endpoint documentation below, content accessed via this API is licensed under the [CC-BY-SA 3.0](https://creativecommons.org/licenses/by-sa/3.0/)  and [GFDL](https://www.gnu.org/copyleft/fdl.html) licenses, and you irrevocably agree to release modifications or additions made through this API under these licenses.  See https://www.mediawiki.org/wiki/REST_API for background and details.
### Endpoint documentation
Please consult each endpoint's documentation for details on:
- Licensing information for the specific type of content
  and data served via the endpoint.
- Stability markers to inform you about development status and
  change policy, according to
  [our API version policy](https://www.mediawiki.org/wiki/API_versioning).
- Endpoint specific usage limits.


The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { MathCheckFormulaRequest } from '../models';
// @ts-ignore
import { Problem } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * MathApi - axios parameter creator
 * @export
 */
export const MathApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Checks the supplied TeX formula for correctness and returns the normalised formula representation as well as information about identifiers. Available types are tex and inline-tex. The response contains the `x-resource-location` header which can be used to retrieve the render of the checked formula in one of the supported rendering formats. Just append the value of the header to `/media/math/{format}/` and perform a GET request against that URL.  Stability: [stable](https://www.mediawiki.org/wiki/API_versioning#Stable). 
         * @summary Check and normalize a TeX formula.
         * @param {'tex' | 'inline-tex' | 'chem'} type The input type of the given formula; can be tex or inline-tex
         * @param {string} q The formula to check
         * @param {MathCheckFormulaRequest} mathCheckFormulaRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkFormula: async (type: 'tex' | 'inline-tex' | 'chem', q: string, mathCheckFormulaRequest: MathCheckFormulaRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('checkFormula', 'type', type)
            // verify required parameter 'q' is not null or undefined
            assertParamExists('checkFormula', 'q', q)
            // verify required parameter 'mathCheckFormulaRequest' is not null or undefined
            assertParamExists('checkFormula', 'mathCheckFormulaRequest', mathCheckFormulaRequest)
            const localVarPath = `/media/math/check/{type}`
                .replace(`{${"type"}}`, encodeURIComponent(String(type !== undefined ? type : `-type-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


            if (q !== undefined) {
                await addFormParam('q', q, false, true)
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: mathCheckFormulaRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/media/math/check/{type}',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(mathCheckFormulaRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the previously-stored formula via `/media/math/check/{type}` for the given hash.  Stability: [stable](https://www.mediawiki.org/wiki/API_versioning#Stable). 
         * @summary Get a previously-stored formula
         * @param {string} hash The hash string of the previous POST data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFormulaByHash: async (hash: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'hash' is not null or undefined
            assertParamExists('getFormulaByHash', 'hash', hash)
            const localVarPath = `/media/math/formula/{hash}`
                .replace(`{${"hash"}}`, encodeURIComponent(String(hash !== undefined ? hash : `-hash-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/media/math/formula/{hash}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Given a request hash, renders a TeX formula into its mathematic representation in the given format. When a request is issued to the `/media/math/check/{format}` POST endpoint, the response contains the `x-resource-location` header denoting the hash ID of the POST data. Once obtained, this endpoint has to be used to obtain the actual render.  Stability: [stable](https://www.mediawiki.org/wiki/API_versioning#Stable). 
         * @summary Get rendered formula in the given format.
         * @param {'svg' | 'mml' | 'png'} format The output format; can be svg or mml
         * @param {string} hash The hash string of the previous POST data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        renderFormulaByHash: async (format: 'svg' | 'mml' | 'png', hash: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'format' is not null or undefined
            assertParamExists('renderFormulaByHash', 'format', format)
            // verify required parameter 'hash' is not null or undefined
            assertParamExists('renderFormulaByHash', 'hash', hash)
            const localVarPath = `/media/math/render/{format}/{hash}`
                .replace(`{${"format"}}`, encodeURIComponent(String(format !== undefined ? format : `-format-`)))
                .replace(`{${"hash"}}`, encodeURIComponent(String(hash !== undefined ? hash : `-hash-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/media/math/render/{format}/{hash}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MathApi - functional programming interface
 * @export
 */
export const MathApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MathApiAxiosParamCreator(configuration)
    return {
        /**
         * Checks the supplied TeX formula for correctness and returns the normalised formula representation as well as information about identifiers. Available types are tex and inline-tex. The response contains the `x-resource-location` header which can be used to retrieve the render of the checked formula in one of the supported rendering formats. Just append the value of the header to `/media/math/{format}/` and perform a GET request against that URL.  Stability: [stable](https://www.mediawiki.org/wiki/API_versioning#Stable). 
         * @summary Check and normalize a TeX formula.
         * @param {MathApiCheckFormulaRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkFormula(requestParameters: MathApiCheckFormulaRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const mathCheckFormulaRequest: MathCheckFormulaRequest = {
                q: requestParameters.q
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkFormula(requestParameters.type, requestParameters.q, mathCheckFormulaRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the previously-stored formula via `/media/math/check/{type}` for the given hash.  Stability: [stable](https://www.mediawiki.org/wiki/API_versioning#Stable). 
         * @summary Get a previously-stored formula
         * @param {MathApiGetFormulaByHashRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFormulaByHash(requestParameters: MathApiGetFormulaByHashRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFormulaByHash(requestParameters.hash, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Given a request hash, renders a TeX formula into its mathematic representation in the given format. When a request is issued to the `/media/math/check/{format}` POST endpoint, the response contains the `x-resource-location` header denoting the hash ID of the POST data. Once obtained, this endpoint has to be used to obtain the actual render.  Stability: [stable](https://www.mediawiki.org/wiki/API_versioning#Stable). 
         * @summary Get rendered formula in the given format.
         * @param {MathApiRenderFormulaByHashRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async renderFormulaByHash(requestParameters: MathApiRenderFormulaByHashRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.renderFormulaByHash(requestParameters.format, requestParameters.hash, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MathApi - factory interface
 * @export
 */
export const MathApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MathApiFp(configuration)
    return {
        /**
         * Checks the supplied TeX formula for correctness and returns the normalised formula representation as well as information about identifiers. Available types are tex and inline-tex. The response contains the `x-resource-location` header which can be used to retrieve the render of the checked formula in one of the supported rendering formats. Just append the value of the header to `/media/math/{format}/` and perform a GET request against that URL.  Stability: [stable](https://www.mediawiki.org/wiki/API_versioning#Stable). 
         * @summary Check and normalize a TeX formula.
         * @param {MathApiCheckFormulaRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkFormula(requestParameters: MathApiCheckFormulaRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.checkFormula(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the previously-stored formula via `/media/math/check/{type}` for the given hash.  Stability: [stable](https://www.mediawiki.org/wiki/API_versioning#Stable). 
         * @summary Get a previously-stored formula
         * @param {MathApiGetFormulaByHashRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFormulaByHash(requestParameters: MathApiGetFormulaByHashRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getFormulaByHash(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Given a request hash, renders a TeX formula into its mathematic representation in the given format. When a request is issued to the `/media/math/check/{format}` POST endpoint, the response contains the `x-resource-location` header denoting the hash ID of the POST data. Once obtained, this endpoint has to be used to obtain the actual render.  Stability: [stable](https://www.mediawiki.org/wiki/API_versioning#Stable). 
         * @summary Get rendered formula in the given format.
         * @param {MathApiRenderFormulaByHashRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        renderFormulaByHash(requestParameters: MathApiRenderFormulaByHashRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.renderFormulaByHash(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for checkFormula operation in MathApi.
 * @export
 * @interface MathApiCheckFormulaRequest
 */
export type MathApiCheckFormulaRequest = {
    
    /**
    * The input type of the given formula; can be tex or inline-tex
    * @type {'tex' | 'inline-tex' | 'chem'}
    * @memberof MathApiCheckFormula
    */
    readonly type: 'tex' | 'inline-tex' | 'chem'
    
    /**
    * The formula to check
    * @type {string}
    * @memberof MathApiCheckFormula
    */
    readonly q: string
    
} & MathCheckFormulaRequest

/**
 * Request parameters for getFormulaByHash operation in MathApi.
 * @export
 * @interface MathApiGetFormulaByHashRequest
 */
export type MathApiGetFormulaByHashRequest = {
    
    /**
    * The hash string of the previous POST data
    * @type {string}
    * @memberof MathApiGetFormulaByHash
    */
    readonly hash: string
    
}

/**
 * Request parameters for renderFormulaByHash operation in MathApi.
 * @export
 * @interface MathApiRenderFormulaByHashRequest
 */
export type MathApiRenderFormulaByHashRequest = {
    
    /**
    * The output format; can be svg or mml
    * @type {'svg' | 'mml' | 'png'}
    * @memberof MathApiRenderFormulaByHash
    */
    readonly format: 'svg' | 'mml' | 'png'
    
    /**
    * The hash string of the previous POST data
    * @type {string}
    * @memberof MathApiRenderFormulaByHash
    */
    readonly hash: string
    
}

/**
 * MathApiGenerated - object-oriented interface
 * @export
 * @class MathApiGenerated
 * @extends {BaseAPI}
 */
export class MathApiGenerated extends BaseAPI {
    /**
     * Checks the supplied TeX formula for correctness and returns the normalised formula representation as well as information about identifiers. Available types are tex and inline-tex. The response contains the `x-resource-location` header which can be used to retrieve the render of the checked formula in one of the supported rendering formats. Just append the value of the header to `/media/math/{format}/` and perform a GET request against that URL.  Stability: [stable](https://www.mediawiki.org/wiki/API_versioning#Stable). 
     * @summary Check and normalize a TeX formula.
     * @param {MathApiCheckFormulaRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MathApiGenerated
     */
    public checkFormula(requestParameters: MathApiCheckFormulaRequest, options?: AxiosRequestConfig) {
        return MathApiFp(this.configuration).checkFormula(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the previously-stored formula via `/media/math/check/{type}` for the given hash.  Stability: [stable](https://www.mediawiki.org/wiki/API_versioning#Stable). 
     * @summary Get a previously-stored formula
     * @param {MathApiGetFormulaByHashRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MathApiGenerated
     */
    public getFormulaByHash(requestParameters: MathApiGetFormulaByHashRequest, options?: AxiosRequestConfig) {
        return MathApiFp(this.configuration).getFormulaByHash(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Given a request hash, renders a TeX formula into its mathematic representation in the given format. When a request is issued to the `/media/math/check/{format}` POST endpoint, the response contains the `x-resource-location` header denoting the hash ID of the POST data. Once obtained, this endpoint has to be used to obtain the actual render.  Stability: [stable](https://www.mediawiki.org/wiki/API_versioning#Stable). 
     * @summary Get rendered formula in the given format.
     * @param {MathApiRenderFormulaByHashRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MathApiGenerated
     */
    public renderFormulaByHash(requestParameters: MathApiRenderFormulaByHashRequest, options?: AxiosRequestConfig) {
        return MathApiFp(this.configuration).renderFormulaByHash(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
