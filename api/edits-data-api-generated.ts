/* tslint:disable */
/* eslint-disable */
/*
Wikimedia

This API provides cacheable and straightforward access to Wikimedia content and data, in machine-readable formats.
### Global Rules
- Limit your clients to no more than 200 requests/s to this API.
  Each API endpoint's documentation may detail more specific usage limits.
- Set a unique `User-Agent` or `Api-User-Agent` header that
  allows us to contact you quickly. Email addresses or URLs
  of contact pages work well.

By using this API, you agree to Wikimedia's  [Terms of Use](https://wikimediafoundation.org/wiki/Terms_of_Use) and [Privacy Policy](https://wikimediafoundation.org/wiki/Privacy_policy). Unless otherwise specified in the endpoint documentation below, content accessed via this API is licensed under the [CC-BY-SA 3.0](https://creativecommons.org/licenses/by-sa/3.0/)  and [GFDL](https://www.gnu.org/copyleft/fdl.html) licenses, and you irrevocably agree to release modifications or additions made through this API under these licenses.  See https://www.mediawiki.org/wiki/REST_API for background and details.
### Endpoint documentation
Please consult each endpoint's documentation for details on:
- Licensing information for the specific type of content
  and data served via the endpoint.
- Stability markers to inform you about development status and
  change policy, according to
  [our API version policy](https://www.mediawiki.org/wiki/API_versioning).
- Endpoint specific usage limits.


The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Edits } from '../models';
// @ts-ignore
import { EditsPerPage } from '../models';
// @ts-ignore
import { Problem } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * EditsDataApi - axios parameter creator
 * @export
 */
export const EditsDataApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Given a Mediawiki project and a date range, returns a timeseries of edits counts. You can filter by editors-type (all-editor-types, anonymous, bot, registered) and page-type (all-page-types, content or non-content). You can choose between daily and monthly granularity as well.  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental) - Rate limit: 25 req/s - License: Data accessible via this endpoint is available under the   [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/). 
         * @summary Get edits counts for a project.
         * @param {string} project The name of any Wikimedia project formatted like {language code}.{project name}, for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped off.  For projects like commons without language codes, use commons.wikimedia. For projects like www.mediawiki.org, you can use that full string, or just use mediawiki or mediawiki.org. If you\&#39;re interested in the aggregation of all projects, use all-projects. 
         * @param {'all-editor-types' | 'anonymous' | 'group-bot' | 'name-bot' | 'user'} editorType If you want to filter by editor-type, use one of anonymous, group-bot (registered accounts belonging to the bot group), name-bot (registered accounts not belonging to the bot group but having bot-like names) or user (registered account not in bot group nor having bot-like name). If you are interested in edits regardless of their editor-type, use all-editor-types. 
         * @param {'all-page-types' | 'content' | 'non-content'} pageType If you want to filter by page-type, use one of content (edits on pages in content namespaces) or non-content (edits on pages in non-content namespaces). If you are interested in edits regardless of their page-type, use all-page-types. 
         * @param {'daily' | 'monthly'} granularity The time unit for the response data. As of today, supported values are daily and monthly. 
         * @param {string} start The date of the first day to include, in YYYYMMDD format
         * @param {string} end The date of the last day to include, in YYYYMMDD format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEditsCountsForProject: async (project: string, editorType: 'all-editor-types' | 'anonymous' | 'group-bot' | 'name-bot' | 'user', pageType: 'all-page-types' | 'content' | 'non-content', granularity: 'daily' | 'monthly', start: string, end: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'project' is not null or undefined
            assertParamExists('getEditsCountsForProject', 'project', project)
            // verify required parameter 'editorType' is not null or undefined
            assertParamExists('getEditsCountsForProject', 'editorType', editorType)
            // verify required parameter 'pageType' is not null or undefined
            assertParamExists('getEditsCountsForProject', 'pageType', pageType)
            // verify required parameter 'granularity' is not null or undefined
            assertParamExists('getEditsCountsForProject', 'granularity', granularity)
            // verify required parameter 'start' is not null or undefined
            assertParamExists('getEditsCountsForProject', 'start', start)
            // verify required parameter 'end' is not null or undefined
            assertParamExists('getEditsCountsForProject', 'end', end)
            const localVarPath = `/metrics/edits/aggregate/{project}/{editor-type}/{page-type}/{granularity}/{start}/{end}`
                .replace(`{${"project"}}`, encodeURIComponent(String(project !== undefined ? project : `-project-`)))
                .replace(`{${"editor-type"}}`, encodeURIComponent(String(editorType !== undefined ? editorType : `-editor-type-`)))
                .replace(`{${"page-type"}}`, encodeURIComponent(String(pageType !== undefined ? pageType : `-page-type-`)))
                .replace(`{${"granularity"}}`, encodeURIComponent(String(granularity !== undefined ? granularity : `-granularity-`)))
                .replace(`{${"start"}}`, encodeURIComponent(String(start !== undefined ? start : `-start-`)))
                .replace(`{${"end"}}`, encodeURIComponent(String(end !== undefined ? end : `-end-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/metrics/edits/aggregate/{project}/{editor-type}/{page-type}/{granularity}/{start}/{end}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Given a Mediawiki project, a page-title prefixed with its canonical namespace (for instance \'User:Jimbo_Wales\') and a date range, returns a timeseries of edit counts. You can filter by editors-type (all-editor-types, anonymous, group-bot, name-bot, user). You can choose between daily and monthly granularity as well.  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental) - Rate limit: 25 req/s - License: Data accessible via this endpoint is available under the   [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/). 
         * @summary Get edit counts for a page in a project.
         * @param {string} project The name of any Wikimedia project formatted like {language code}.{project name}, for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped off. For projects like commons without language codes, use commons.wikimedia. For projects like www.mediawiki.org, you can use that full string, or just use mediawiki or mediawiki.org. 
         * @param {string} pageTitle The page-title to request edits for. It should be prefixed with canonical namespace. Spaces will be converted to underscores. 
         * @param {'all-editor-types' | 'anonymous' | 'group-bot' | 'name-bot' | 'user'} editorType If you want to filter by editor-type, use one of anonymous, group-bot (registered accounts belonging to the bot group), name-bot (registered accounts not belonging to the bot group but having bot-like names) or user (registered account not in bot group nor having bot-like name). If you are interested in edits regardless of their editor-type, use all-editor-types. 
         * @param {'daily' | 'monthly'} granularity Time unit for the response data. As of today, supported values are daily and monthly 
         * @param {string} start The date of the first day to include, in YYYYMMDD format
         * @param {string} end The date of the last day to include, in YYYYMMDD format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPageEditCounts: async (project: string, pageTitle: string, editorType: 'all-editor-types' | 'anonymous' | 'group-bot' | 'name-bot' | 'user', granularity: 'daily' | 'monthly', start: string, end: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'project' is not null or undefined
            assertParamExists('getPageEditCounts', 'project', project)
            // verify required parameter 'pageTitle' is not null or undefined
            assertParamExists('getPageEditCounts', 'pageTitle', pageTitle)
            // verify required parameter 'editorType' is not null or undefined
            assertParamExists('getPageEditCounts', 'editorType', editorType)
            // verify required parameter 'granularity' is not null or undefined
            assertParamExists('getPageEditCounts', 'granularity', granularity)
            // verify required parameter 'start' is not null or undefined
            assertParamExists('getPageEditCounts', 'start', start)
            // verify required parameter 'end' is not null or undefined
            assertParamExists('getPageEditCounts', 'end', end)
            const localVarPath = `/metrics/edits/per-page/{project}/{page-title}/{editor-type}/{granularity}/{start}/{end}`
                .replace(`{${"project"}}`, encodeURIComponent(String(project !== undefined ? project : `-project-`)))
                .replace(`{${"page-title"}}`, encodeURIComponent(String(pageTitle !== undefined ? pageTitle : `-page-title-`)))
                .replace(`{${"editor-type"}}`, encodeURIComponent(String(editorType !== undefined ? editorType : `-editor-type-`)))
                .replace(`{${"granularity"}}`, encodeURIComponent(String(granularity !== undefined ? granularity : `-granularity-`)))
                .replace(`{${"start"}}`, encodeURIComponent(String(start !== undefined ? start : `-start-`)))
                .replace(`{${"end"}}`, encodeURIComponent(String(end !== undefined ? end : `-end-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/metrics/edits/per-page/{project}/{page-title}/{editor-type}/{granularity}/{start}/{end}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EditsDataApi - functional programming interface
 * @export
 */
export const EditsDataApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EditsDataApiAxiosParamCreator(configuration)
    return {
        /**
         * Given a Mediawiki project and a date range, returns a timeseries of edits counts. You can filter by editors-type (all-editor-types, anonymous, bot, registered) and page-type (all-page-types, content or non-content). You can choose between daily and monthly granularity as well.  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental) - Rate limit: 25 req/s - License: Data accessible via this endpoint is available under the   [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/). 
         * @summary Get edits counts for a project.
         * @param {EditsDataApiGetEditsCountsForProjectRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEditsCountsForProject(requestParameters: EditsDataApiGetEditsCountsForProjectRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEditsCountsForProject(requestParameters.project, requestParameters.editorType, requestParameters.pageType, requestParameters.granularity, requestParameters.start, requestParameters.end, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Given a Mediawiki project, a page-title prefixed with its canonical namespace (for instance \'User:Jimbo_Wales\') and a date range, returns a timeseries of edit counts. You can filter by editors-type (all-editor-types, anonymous, group-bot, name-bot, user). You can choose between daily and monthly granularity as well.  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental) - Rate limit: 25 req/s - License: Data accessible via this endpoint is available under the   [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/). 
         * @summary Get edit counts for a page in a project.
         * @param {EditsDataApiGetPageEditCountsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPageEditCounts(requestParameters: EditsDataApiGetPageEditCountsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPageEditCounts(requestParameters.project, requestParameters.pageTitle, requestParameters.editorType, requestParameters.granularity, requestParameters.start, requestParameters.end, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EditsDataApi - factory interface
 * @export
 */
export const EditsDataApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EditsDataApiFp(configuration)
    return {
        /**
         * Given a Mediawiki project and a date range, returns a timeseries of edits counts. You can filter by editors-type (all-editor-types, anonymous, bot, registered) and page-type (all-page-types, content or non-content). You can choose between daily and monthly granularity as well.  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental) - Rate limit: 25 req/s - License: Data accessible via this endpoint is available under the   [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/). 
         * @summary Get edits counts for a project.
         * @param {EditsDataApiGetEditsCountsForProjectRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEditsCountsForProject(requestParameters: EditsDataApiGetEditsCountsForProjectRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getEditsCountsForProject(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Given a Mediawiki project, a page-title prefixed with its canonical namespace (for instance \'User:Jimbo_Wales\') and a date range, returns a timeseries of edit counts. You can filter by editors-type (all-editor-types, anonymous, group-bot, name-bot, user). You can choose between daily and monthly granularity as well.  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental) - Rate limit: 25 req/s - License: Data accessible via this endpoint is available under the   [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/). 
         * @summary Get edit counts for a page in a project.
         * @param {EditsDataApiGetPageEditCountsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPageEditCounts(requestParameters: EditsDataApiGetPageEditCountsRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getPageEditCounts(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getEditsCountsForProject operation in EditsDataApi.
 * @export
 * @interface EditsDataApiGetEditsCountsForProjectRequest
 */
export type EditsDataApiGetEditsCountsForProjectRequest = {
    
    /**
    * The name of any Wikimedia project formatted like {language code}.{project name}, for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped off.  For projects like commons without language codes, use commons.wikimedia. For projects like www.mediawiki.org, you can use that full string, or just use mediawiki or mediawiki.org. If you\'re interested in the aggregation of all projects, use all-projects. 
    * @type {string}
    * @memberof EditsDataApiGetEditsCountsForProject
    */
    readonly project: string
    
    /**
    * If you want to filter by editor-type, use one of anonymous, group-bot (registered accounts belonging to the bot group), name-bot (registered accounts not belonging to the bot group but having bot-like names) or user (registered account not in bot group nor having bot-like name). If you are interested in edits regardless of their editor-type, use all-editor-types. 
    * @type {'all-editor-types' | 'anonymous' | 'group-bot' | 'name-bot' | 'user'}
    * @memberof EditsDataApiGetEditsCountsForProject
    */
    readonly editorType: 'all-editor-types' | 'anonymous' | 'group-bot' | 'name-bot' | 'user'
    
    /**
    * If you want to filter by page-type, use one of content (edits on pages in content namespaces) or non-content (edits on pages in non-content namespaces). If you are interested in edits regardless of their page-type, use all-page-types. 
    * @type {'all-page-types' | 'content' | 'non-content'}
    * @memberof EditsDataApiGetEditsCountsForProject
    */
    readonly pageType: 'all-page-types' | 'content' | 'non-content'
    
    /**
    * The time unit for the response data. As of today, supported values are daily and monthly. 
    * @type {'daily' | 'monthly'}
    * @memberof EditsDataApiGetEditsCountsForProject
    */
    readonly granularity: 'daily' | 'monthly'
    
    /**
    * The date of the first day to include, in YYYYMMDD format
    * @type {string}
    * @memberof EditsDataApiGetEditsCountsForProject
    */
    readonly start: string
    
    /**
    * The date of the last day to include, in YYYYMMDD format
    * @type {string}
    * @memberof EditsDataApiGetEditsCountsForProject
    */
    readonly end: string
    
}

/**
 * Request parameters for getPageEditCounts operation in EditsDataApi.
 * @export
 * @interface EditsDataApiGetPageEditCountsRequest
 */
export type EditsDataApiGetPageEditCountsRequest = {
    
    /**
    * The name of any Wikimedia project formatted like {language code}.{project name}, for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped off. For projects like commons without language codes, use commons.wikimedia. For projects like www.mediawiki.org, you can use that full string, or just use mediawiki or mediawiki.org. 
    * @type {string}
    * @memberof EditsDataApiGetPageEditCounts
    */
    readonly project: string
    
    /**
    * The page-title to request edits for. It should be prefixed with canonical namespace. Spaces will be converted to underscores. 
    * @type {string}
    * @memberof EditsDataApiGetPageEditCounts
    */
    readonly pageTitle: string
    
    /**
    * If you want to filter by editor-type, use one of anonymous, group-bot (registered accounts belonging to the bot group), name-bot (registered accounts not belonging to the bot group but having bot-like names) or user (registered account not in bot group nor having bot-like name). If you are interested in edits regardless of their editor-type, use all-editor-types. 
    * @type {'all-editor-types' | 'anonymous' | 'group-bot' | 'name-bot' | 'user'}
    * @memberof EditsDataApiGetPageEditCounts
    */
    readonly editorType: 'all-editor-types' | 'anonymous' | 'group-bot' | 'name-bot' | 'user'
    
    /**
    * Time unit for the response data. As of today, supported values are daily and monthly 
    * @type {'daily' | 'monthly'}
    * @memberof EditsDataApiGetPageEditCounts
    */
    readonly granularity: 'daily' | 'monthly'
    
    /**
    * The date of the first day to include, in YYYYMMDD format
    * @type {string}
    * @memberof EditsDataApiGetPageEditCounts
    */
    readonly start: string
    
    /**
    * The date of the last day to include, in YYYYMMDD format
    * @type {string}
    * @memberof EditsDataApiGetPageEditCounts
    */
    readonly end: string
    
}

/**
 * EditsDataApiGenerated - object-oriented interface
 * @export
 * @class EditsDataApiGenerated
 * @extends {BaseAPI}
 */
export class EditsDataApiGenerated extends BaseAPI {
    /**
     * Given a Mediawiki project and a date range, returns a timeseries of edits counts. You can filter by editors-type (all-editor-types, anonymous, bot, registered) and page-type (all-page-types, content or non-content). You can choose between daily and monthly granularity as well.  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental) - Rate limit: 25 req/s - License: Data accessible via this endpoint is available under the   [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/). 
     * @summary Get edits counts for a project.
     * @param {EditsDataApiGetEditsCountsForProjectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EditsDataApiGenerated
     */
    public getEditsCountsForProject(requestParameters: EditsDataApiGetEditsCountsForProjectRequest, options?: AxiosRequestConfig) {
        return EditsDataApiFp(this.configuration).getEditsCountsForProject(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Given a Mediawiki project, a page-title prefixed with its canonical namespace (for instance \'User:Jimbo_Wales\') and a date range, returns a timeseries of edit counts. You can filter by editors-type (all-editor-types, anonymous, group-bot, name-bot, user). You can choose between daily and monthly granularity as well.  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental) - Rate limit: 25 req/s - License: Data accessible via this endpoint is available under the   [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/). 
     * @summary Get edit counts for a page in a project.
     * @param {EditsDataApiGetPageEditCountsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EditsDataApiGenerated
     */
    public getPageEditCounts(requestParameters: EditsDataApiGetPageEditCountsRequest, options?: AxiosRequestConfig) {
        return EditsDataApiFp(this.configuration).getPageEditCounts(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
