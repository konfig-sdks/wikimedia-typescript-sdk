/* tslint:disable */
/* eslint-disable */
/*
Wikimedia

This API provides cacheable and straightforward access to Wikimedia content and data, in machine-readable formats.
### Global Rules
- Limit your clients to no more than 200 requests/s to this API.
  Each API endpoint's documentation may detail more specific usage limits.
- Set a unique `User-Agent` or `Api-User-Agent` header that
  allows us to contact you quickly. Email addresses or URLs
  of contact pages work well.

By using this API, you agree to Wikimedia's  [Terms of Use](https://wikimediafoundation.org/wiki/Terms_of_Use) and [Privacy Policy](https://wikimediafoundation.org/wiki/Privacy_policy). Unless otherwise specified in the endpoint documentation below, content accessed via this API is licensed under the [CC-BY-SA 3.0](https://creativecommons.org/licenses/by-sa/3.0/)  and [GFDL](https://www.gnu.org/copyleft/fdl.html) licenses, and you irrevocably agree to release modifications or additions made through this API under these licenses.  See https://www.mediawiki.org/wiki/REST_API for background and details.
### Endpoint documentation
Please consult each endpoint's documentation for details on:
- Licensing information for the specific type of content
  and data served via the endpoint.
- Stability markers to inform you about development status and
  change policy, according to
  [our API version policy](https://www.mediawiki.org/wiki/API_versioning).
- Endpoint specific usage limits.


The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CxDict } from '../models';
// @ts-ignore
import { CxLanguagepairs } from '../models';
// @ts-ignore
import { CxListTools } from '../models';
// @ts-ignore
import { CxMt } from '../models';
// @ts-ignore
import { Problem } from '../models';
// @ts-ignore
import { TransformContentMachineTranslateRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * TransformApi - axios parameter creator
 * @export
 */
export const TransformApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Fetches the machine translation for the posted content from the source to the destination language.  Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable) 
         * @summary Machine-translate content
         * @param {string} fromLang The source language code
         * @param {string} toLang The target language code
         * @param {TransformContentMachineTranslateRequest} transformContentMachineTranslateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentMachineTranslate: async (fromLang: string, toLang: string, transformContentMachineTranslateRequest: TransformContentMachineTranslateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fromLang' is not null or undefined
            assertParamExists('contentMachineTranslate', 'fromLang', fromLang)
            // verify required parameter 'toLang' is not null or undefined
            assertParamExists('contentMachineTranslate', 'toLang', toLang)
            // verify required parameter 'transformContentMachineTranslateRequest' is not null or undefined
            assertParamExists('contentMachineTranslate', 'transformContentMachineTranslateRequest', transformContentMachineTranslateRequest)
            const localVarPath = `/transform/html/from/{from_lang}/to/{to_lang}`
                .replace(`{${"from_lang"}}`, encodeURIComponent(String(fromLang !== undefined ? fromLang : `-from_lang-`)))
                .replace(`{${"to_lang"}}`, encodeURIComponent(String(toLang !== undefined ? toLang : `-to_lang-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: transformContentMachineTranslateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/transform/html/from/{from_lang}/to/{to_lang}',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(transformContentMachineTranslateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches the machine translation for the posted content from the source to the destination language.  Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable) 
         * @summary Machine-translate content
         * @param {string} fromLang The source language code
         * @param {string} toLang The target language code
         * @param {'Apertium' | 'Yandex' | 'Youdao'} provider The machine translation provider id
         * @param {TransformContentMachineTranslateRequest} transformContentMachineTranslateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentMachineTranslate_1: async (fromLang: string, toLang: string, provider: 'Apertium' | 'Yandex' | 'Youdao', transformContentMachineTranslateRequest: TransformContentMachineTranslateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fromLang' is not null or undefined
            assertParamExists('contentMachineTranslate_1', 'fromLang', fromLang)
            // verify required parameter 'toLang' is not null or undefined
            assertParamExists('contentMachineTranslate_1', 'toLang', toLang)
            // verify required parameter 'provider' is not null or undefined
            assertParamExists('contentMachineTranslate_1', 'provider', provider)
            // verify required parameter 'transformContentMachineTranslateRequest' is not null or undefined
            assertParamExists('contentMachineTranslate_1', 'transformContentMachineTranslateRequest', transformContentMachineTranslateRequest)
            const localVarPath = `/transform/html/from/{from_lang}/to/{to_lang}/{provider}`
                .replace(`{${"from_lang"}}`, encodeURIComponent(String(fromLang !== undefined ? fromLang : `-from_lang-`)))
                .replace(`{${"to_lang"}}`, encodeURIComponent(String(toLang !== undefined ? toLang : `-to_lang-`)))
                .replace(`{${"provider"}}`, encodeURIComponent(String(provider !== undefined ? provider : `-provider-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: transformContentMachineTranslateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/transform/html/from/{from_lang}/to/{to_lang}/{provider}',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(transformContentMachineTranslateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches the dictionary meaning of a word from a language and displays it in the target language.  Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable) 
         * @summary Fetch the dictionary meaning of a word
         * @param {string} fromLang The source language code
         * @param {string} toLang The target language code
         * @param {string} word The word to lookup
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDictionaryMeaning: async (fromLang: string, toLang: string, word: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fromLang' is not null or undefined
            assertParamExists('getDictionaryMeaning', 'fromLang', fromLang)
            // verify required parameter 'toLang' is not null or undefined
            assertParamExists('getDictionaryMeaning', 'toLang', toLang)
            // verify required parameter 'word' is not null or undefined
            assertParamExists('getDictionaryMeaning', 'word', word)
            const localVarPath = `/transform/word/from/{from_lang}/to/{to_lang}/{word}`
                .replace(`{${"from_lang"}}`, encodeURIComponent(String(fromLang !== undefined ? fromLang : `-from_lang-`)))
                .replace(`{${"to_lang"}}`, encodeURIComponent(String(toLang !== undefined ? toLang : `-to_lang-`)))
                .replace(`{${"word"}}`, encodeURIComponent(String(word !== undefined ? word : `-word-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/transform/word/from/{from_lang}/to/{to_lang}/{word}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches the dictionary meaning of a word from a language and displays it in the target language.  Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable) 
         * @summary Fetch the dictionary meaning of a word
         * @param {string} fromLang The source language code
         * @param {string} toLang The target language code
         * @param {string} word The word to lookup
         * @param {'JsonDict' | 'Dictd'} provider The dictionary provider id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDictionaryMeaning_2: async (fromLang: string, toLang: string, word: string, provider: 'JsonDict' | 'Dictd', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fromLang' is not null or undefined
            assertParamExists('getDictionaryMeaning_2', 'fromLang', fromLang)
            // verify required parameter 'toLang' is not null or undefined
            assertParamExists('getDictionaryMeaning_2', 'toLang', toLang)
            // verify required parameter 'word' is not null or undefined
            assertParamExists('getDictionaryMeaning_2', 'word', word)
            // verify required parameter 'provider' is not null or undefined
            assertParamExists('getDictionaryMeaning_2', 'provider', provider)
            const localVarPath = `/transform/word/from/{from_lang}/to/{to_lang}/{word}/{provider}`
                .replace(`{${"from_lang"}}`, encodeURIComponent(String(fromLang !== undefined ? fromLang : `-from_lang-`)))
                .replace(`{${"to_lang"}}`, encodeURIComponent(String(toLang !== undefined ? toLang : `-to_lang-`)))
                .replace(`{${"word"}}`, encodeURIComponent(String(word !== undefined ? word : `-word-`)))
                .replace(`{${"provider"}}`, encodeURIComponent(String(provider !== undefined ? provider : `-provider-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/transform/word/from/{from_lang}/to/{to_lang}/{word}/{provider}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches the list of tools and all of the language pairs it can translate  Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable) 
         * @summary Lists the tools and language pairs available for the given tool category
         * @param {'mt' | 'dictionary'} tool The tool category to list tools and language pairs for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListToolLanguagePairs: async (tool: 'mt' | 'dictionary', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tool' is not null or undefined
            assertParamExists('getListToolLanguagePairs', 'tool', tool)
            const localVarPath = `/transform/list/tool/{tool}`
                .replace(`{${"tool"}}`, encodeURIComponent(String(tool !== undefined ? tool : `-tool-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/transform/list/tool/{tool}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches the list of tools that are available for the given pair of languages.  Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable) 
         * @summary Lists the tools available for a language pair
         * @param {string} from The source language code
         * @param {string} to The target language code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        languagePairList: async (from: string, to: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'from' is not null or undefined
            assertParamExists('languagePairList', 'from', from)
            // verify required parameter 'to' is not null or undefined
            assertParamExists('languagePairList', 'to', to)
            const localVarPath = `/transform/list/pair/{from}/{to}`
                .replace(`{${"from"}}`, encodeURIComponent(String(from !== undefined ? from : `-from-`)))
                .replace(`{${"to"}}`, encodeURIComponent(String(to !== undefined ? to : `-to-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/transform/list/pair/{from}/{to}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches the list of language pairs the back-end service can translate  Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable) 
         * @summary Lists the language pairs supported by the back-end
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLanguagePairs: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/transform/list/languagepairs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/transform/list/languagepairs',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches the list of tools and all of the language pairs it can translate  Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable) 
         * @summary Lists the tools and language pairs available for the given tool category
         * @param {'mt' | 'dictionary'} tool The tool category to list tools and language pairs for
         * @param {string} from The source language code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        toolLanguagePairsList: async (tool: 'mt' | 'dictionary', from: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tool' is not null or undefined
            assertParamExists('toolLanguagePairsList', 'tool', tool)
            // verify required parameter 'from' is not null or undefined
            assertParamExists('toolLanguagePairsList', 'from', from)
            const localVarPath = `/transform/list/tool/{tool}/{from}`
                .replace(`{${"tool"}}`, encodeURIComponent(String(tool !== undefined ? tool : `-tool-`)))
                .replace(`{${"from"}}`, encodeURIComponent(String(from !== undefined ? from : `-from-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/transform/list/tool/{tool}/{from}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches the list of tools and all of the language pairs it can translate  Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable) 
         * @summary Lists the tools and language pairs available for the given tool category
         * @param {'mt' | 'dictionary'} tool The tool category to list tools and language pairs for
         * @param {string} from The source language code
         * @param {string} to The target language code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        toolLanguagePairsList_3: async (tool: 'mt' | 'dictionary', from: string, to: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tool' is not null or undefined
            assertParamExists('toolLanguagePairsList_3', 'tool', tool)
            // verify required parameter 'from' is not null or undefined
            assertParamExists('toolLanguagePairsList_3', 'from', from)
            // verify required parameter 'to' is not null or undefined
            assertParamExists('toolLanguagePairsList_3', 'to', to)
            const localVarPath = `/transform/list/tool/{tool}/{from}/{to}`
                .replace(`{${"tool"}}`, encodeURIComponent(String(tool !== undefined ? tool : `-tool-`)))
                .replace(`{${"from"}}`, encodeURIComponent(String(from !== undefined ? from : `-from-`)))
                .replace(`{${"to"}}`, encodeURIComponent(String(to !== undefined ? to : `-to-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/transform/list/tool/{tool}/{from}/{to}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TransformApi - functional programming interface
 * @export
 */
export const TransformApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TransformApiAxiosParamCreator(configuration)
    return {
        /**
         * Fetches the machine translation for the posted content from the source to the destination language.  Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable) 
         * @summary Machine-translate content
         * @param {TransformApiContentMachineTranslateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contentMachineTranslate(requestParameters: TransformApiContentMachineTranslateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CxMt>> {
            const transformContentMachineTranslateRequest: TransformContentMachineTranslateRequest = {
                html: requestParameters.html
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.contentMachineTranslate(requestParameters.fromLang, requestParameters.toLang, transformContentMachineTranslateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetches the machine translation for the posted content from the source to the destination language.  Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable) 
         * @summary Machine-translate content
         * @param {TransformApiContentMachineTranslate0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contentMachineTranslate_1(requestParameters: TransformApiContentMachineTranslate0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CxMt>> {
            const transformContentMachineTranslateRequest: TransformContentMachineTranslateRequest = {
                html: requestParameters.html
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.contentMachineTranslate_1(requestParameters.fromLang, requestParameters.toLang, requestParameters.provider, transformContentMachineTranslateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetches the dictionary meaning of a word from a language and displays it in the target language.  Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable) 
         * @summary Fetch the dictionary meaning of a word
         * @param {TransformApiGetDictionaryMeaningRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDictionaryMeaning(requestParameters: TransformApiGetDictionaryMeaningRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CxDict>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDictionaryMeaning(requestParameters.fromLang, requestParameters.toLang, requestParameters.word, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetches the dictionary meaning of a word from a language and displays it in the target language.  Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable) 
         * @summary Fetch the dictionary meaning of a word
         * @param {TransformApiGetDictionaryMeaning0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDictionaryMeaning_2(requestParameters: TransformApiGetDictionaryMeaning0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CxDict>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDictionaryMeaning_2(requestParameters.fromLang, requestParameters.toLang, requestParameters.word, requestParameters.provider, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetches the list of tools and all of the language pairs it can translate  Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable) 
         * @summary Lists the tools and language pairs available for the given tool category
         * @param {TransformApiGetListToolLanguagePairsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getListToolLanguagePairs(requestParameters: TransformApiGetListToolLanguagePairsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getListToolLanguagePairs(requestParameters.tool, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetches the list of tools that are available for the given pair of languages.  Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable) 
         * @summary Lists the tools available for a language pair
         * @param {TransformApiLanguagePairListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async languagePairList(requestParameters: TransformApiLanguagePairListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CxListTools>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.languagePairList(requestParameters.from, requestParameters.to, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetches the list of language pairs the back-end service can translate  Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable) 
         * @summary Lists the language pairs supported by the back-end
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listLanguagePairs(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CxLanguagepairs>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listLanguagePairs(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetches the list of tools and all of the language pairs it can translate  Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable) 
         * @summary Lists the tools and language pairs available for the given tool category
         * @param {TransformApiToolLanguagePairsListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async toolLanguagePairsList(requestParameters: TransformApiToolLanguagePairsListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.toolLanguagePairsList(requestParameters.tool, requestParameters.from, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetches the list of tools and all of the language pairs it can translate  Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable) 
         * @summary Lists the tools and language pairs available for the given tool category
         * @param {TransformApiToolLanguagePairsList0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async toolLanguagePairsList_3(requestParameters: TransformApiToolLanguagePairsList0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.toolLanguagePairsList_3(requestParameters.tool, requestParameters.from, requestParameters.to, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TransformApi - factory interface
 * @export
 */
export const TransformApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TransformApiFp(configuration)
    return {
        /**
         * Fetches the machine translation for the posted content from the source to the destination language.  Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable) 
         * @summary Machine-translate content
         * @param {TransformApiContentMachineTranslateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentMachineTranslate(requestParameters: TransformApiContentMachineTranslateRequest, options?: AxiosRequestConfig): AxiosPromise<CxMt> {
            return localVarFp.contentMachineTranslate(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches the machine translation for the posted content from the source to the destination language.  Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable) 
         * @summary Machine-translate content
         * @param {TransformApiContentMachineTranslate0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentMachineTranslate_1(requestParameters: TransformApiContentMachineTranslate0Request, options?: AxiosRequestConfig): AxiosPromise<CxMt> {
            return localVarFp.contentMachineTranslate_1(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches the dictionary meaning of a word from a language and displays it in the target language.  Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable) 
         * @summary Fetch the dictionary meaning of a word
         * @param {TransformApiGetDictionaryMeaningRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDictionaryMeaning(requestParameters: TransformApiGetDictionaryMeaningRequest, options?: AxiosRequestConfig): AxiosPromise<CxDict> {
            return localVarFp.getDictionaryMeaning(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches the dictionary meaning of a word from a language and displays it in the target language.  Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable) 
         * @summary Fetch the dictionary meaning of a word
         * @param {TransformApiGetDictionaryMeaning0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDictionaryMeaning_2(requestParameters: TransformApiGetDictionaryMeaning0Request, options?: AxiosRequestConfig): AxiosPromise<CxDict> {
            return localVarFp.getDictionaryMeaning_2(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches the list of tools and all of the language pairs it can translate  Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable) 
         * @summary Lists the tools and language pairs available for the given tool category
         * @param {TransformApiGetListToolLanguagePairsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListToolLanguagePairs(requestParameters: TransformApiGetListToolLanguagePairsRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getListToolLanguagePairs(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches the list of tools that are available for the given pair of languages.  Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable) 
         * @summary Lists the tools available for a language pair
         * @param {TransformApiLanguagePairListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        languagePairList(requestParameters: TransformApiLanguagePairListRequest, options?: AxiosRequestConfig): AxiosPromise<CxListTools> {
            return localVarFp.languagePairList(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches the list of language pairs the back-end service can translate  Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable) 
         * @summary Lists the language pairs supported by the back-end
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLanguagePairs(options?: AxiosRequestConfig): AxiosPromise<CxLanguagepairs> {
            return localVarFp.listLanguagePairs(options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches the list of tools and all of the language pairs it can translate  Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable) 
         * @summary Lists the tools and language pairs available for the given tool category
         * @param {TransformApiToolLanguagePairsListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        toolLanguagePairsList(requestParameters: TransformApiToolLanguagePairsListRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.toolLanguagePairsList(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches the list of tools and all of the language pairs it can translate  Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable) 
         * @summary Lists the tools and language pairs available for the given tool category
         * @param {TransformApiToolLanguagePairsList0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        toolLanguagePairsList_3(requestParameters: TransformApiToolLanguagePairsList0Request, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.toolLanguagePairsList_3(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for contentMachineTranslate operation in TransformApi.
 * @export
 * @interface TransformApiContentMachineTranslateRequest
 */
export type TransformApiContentMachineTranslateRequest = {
    
    /**
    * The source language code
    * @type {string}
    * @memberof TransformApiContentMachineTranslate
    */
    readonly fromLang: string
    
    /**
    * The target language code
    * @type {string}
    * @memberof TransformApiContentMachineTranslate
    */
    readonly toLang: string
    
} & TransformContentMachineTranslateRequest

/**
 * Request parameters for contentMachineTranslate_1 operation in TransformApi.
 * @export
 * @interface TransformApiContentMachineTranslate0Request
 */
export type TransformApiContentMachineTranslate0Request = {
    
    /**
    * The source language code
    * @type {string}
    * @memberof TransformApiContentMachineTranslate0
    */
    readonly fromLang: string
    
    /**
    * The target language code
    * @type {string}
    * @memberof TransformApiContentMachineTranslate0
    */
    readonly toLang: string
    
    /**
    * The machine translation provider id
    * @type {'Apertium' | 'Yandex' | 'Youdao'}
    * @memberof TransformApiContentMachineTranslate0
    */
    readonly provider: 'Apertium' | 'Yandex' | 'Youdao'
    
} & TransformContentMachineTranslateRequest

/**
 * Request parameters for getDictionaryMeaning operation in TransformApi.
 * @export
 * @interface TransformApiGetDictionaryMeaningRequest
 */
export type TransformApiGetDictionaryMeaningRequest = {
    
    /**
    * The source language code
    * @type {string}
    * @memberof TransformApiGetDictionaryMeaning
    */
    readonly fromLang: string
    
    /**
    * The target language code
    * @type {string}
    * @memberof TransformApiGetDictionaryMeaning
    */
    readonly toLang: string
    
    /**
    * The word to lookup
    * @type {string}
    * @memberof TransformApiGetDictionaryMeaning
    */
    readonly word: string
    
}

/**
 * Request parameters for getDictionaryMeaning_2 operation in TransformApi.
 * @export
 * @interface TransformApiGetDictionaryMeaning0Request
 */
export type TransformApiGetDictionaryMeaning0Request = {
    
    /**
    * The source language code
    * @type {string}
    * @memberof TransformApiGetDictionaryMeaning0
    */
    readonly fromLang: string
    
    /**
    * The target language code
    * @type {string}
    * @memberof TransformApiGetDictionaryMeaning0
    */
    readonly toLang: string
    
    /**
    * The word to lookup
    * @type {string}
    * @memberof TransformApiGetDictionaryMeaning0
    */
    readonly word: string
    
    /**
    * The dictionary provider id
    * @type {'JsonDict' | 'Dictd'}
    * @memberof TransformApiGetDictionaryMeaning0
    */
    readonly provider: 'JsonDict' | 'Dictd'
    
}

/**
 * Request parameters for getListToolLanguagePairs operation in TransformApi.
 * @export
 * @interface TransformApiGetListToolLanguagePairsRequest
 */
export type TransformApiGetListToolLanguagePairsRequest = {
    
    /**
    * The tool category to list tools and language pairs for
    * @type {'mt' | 'dictionary'}
    * @memberof TransformApiGetListToolLanguagePairs
    */
    readonly tool: 'mt' | 'dictionary'
    
}

/**
 * Request parameters for languagePairList operation in TransformApi.
 * @export
 * @interface TransformApiLanguagePairListRequest
 */
export type TransformApiLanguagePairListRequest = {
    
    /**
    * The source language code
    * @type {string}
    * @memberof TransformApiLanguagePairList
    */
    readonly from: string
    
    /**
    * The target language code
    * @type {string}
    * @memberof TransformApiLanguagePairList
    */
    readonly to: string
    
}

/**
 * Request parameters for toolLanguagePairsList operation in TransformApi.
 * @export
 * @interface TransformApiToolLanguagePairsListRequest
 */
export type TransformApiToolLanguagePairsListRequest = {
    
    /**
    * The tool category to list tools and language pairs for
    * @type {'mt' | 'dictionary'}
    * @memberof TransformApiToolLanguagePairsList
    */
    readonly tool: 'mt' | 'dictionary'
    
    /**
    * The source language code
    * @type {string}
    * @memberof TransformApiToolLanguagePairsList
    */
    readonly from: string
    
}

/**
 * Request parameters for toolLanguagePairsList_3 operation in TransformApi.
 * @export
 * @interface TransformApiToolLanguagePairsList0Request
 */
export type TransformApiToolLanguagePairsList0Request = {
    
    /**
    * The tool category to list tools and language pairs for
    * @type {'mt' | 'dictionary'}
    * @memberof TransformApiToolLanguagePairsList0
    */
    readonly tool: 'mt' | 'dictionary'
    
    /**
    * The source language code
    * @type {string}
    * @memberof TransformApiToolLanguagePairsList0
    */
    readonly from: string
    
    /**
    * The target language code
    * @type {string}
    * @memberof TransformApiToolLanguagePairsList0
    */
    readonly to: string
    
}

/**
 * TransformApiGenerated - object-oriented interface
 * @export
 * @class TransformApiGenerated
 * @extends {BaseAPI}
 */
export class TransformApiGenerated extends BaseAPI {
    /**
     * Fetches the machine translation for the posted content from the source to the destination language.  Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable) 
     * @summary Machine-translate content
     * @param {TransformApiContentMachineTranslateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransformApiGenerated
     */
    public contentMachineTranslate(requestParameters: TransformApiContentMachineTranslateRequest, options?: AxiosRequestConfig) {
        return TransformApiFp(this.configuration).contentMachineTranslate(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetches the machine translation for the posted content from the source to the destination language.  Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable) 
     * @summary Machine-translate content
     * @param {TransformApiContentMachineTranslate0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransformApiGenerated
     */
    public contentMachineTranslate_1(requestParameters: TransformApiContentMachineTranslate0Request, options?: AxiosRequestConfig) {
        return TransformApiFp(this.configuration).contentMachineTranslate_1(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetches the dictionary meaning of a word from a language and displays it in the target language.  Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable) 
     * @summary Fetch the dictionary meaning of a word
     * @param {TransformApiGetDictionaryMeaningRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransformApiGenerated
     */
    public getDictionaryMeaning(requestParameters: TransformApiGetDictionaryMeaningRequest, options?: AxiosRequestConfig) {
        return TransformApiFp(this.configuration).getDictionaryMeaning(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetches the dictionary meaning of a word from a language and displays it in the target language.  Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable) 
     * @summary Fetch the dictionary meaning of a word
     * @param {TransformApiGetDictionaryMeaning0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransformApiGenerated
     */
    public getDictionaryMeaning_2(requestParameters: TransformApiGetDictionaryMeaning0Request, options?: AxiosRequestConfig) {
        return TransformApiFp(this.configuration).getDictionaryMeaning_2(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetches the list of tools and all of the language pairs it can translate  Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable) 
     * @summary Lists the tools and language pairs available for the given tool category
     * @param {TransformApiGetListToolLanguagePairsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransformApiGenerated
     */
    public getListToolLanguagePairs(requestParameters: TransformApiGetListToolLanguagePairsRequest, options?: AxiosRequestConfig) {
        return TransformApiFp(this.configuration).getListToolLanguagePairs(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetches the list of tools that are available for the given pair of languages.  Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable) 
     * @summary Lists the tools available for a language pair
     * @param {TransformApiLanguagePairListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransformApiGenerated
     */
    public languagePairList(requestParameters: TransformApiLanguagePairListRequest, options?: AxiosRequestConfig) {
        return TransformApiFp(this.configuration).languagePairList(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetches the list of language pairs the back-end service can translate  Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable) 
     * @summary Lists the language pairs supported by the back-end
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransformApiGenerated
     */
    public listLanguagePairs(options?: AxiosRequestConfig) {
        return TransformApiFp(this.configuration).listLanguagePairs(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetches the list of tools and all of the language pairs it can translate  Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable) 
     * @summary Lists the tools and language pairs available for the given tool category
     * @param {TransformApiToolLanguagePairsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransformApiGenerated
     */
    public toolLanguagePairsList(requestParameters: TransformApiToolLanguagePairsListRequest, options?: AxiosRequestConfig) {
        return TransformApiFp(this.configuration).toolLanguagePairsList(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetches the list of tools and all of the language pairs it can translate  Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable) 
     * @summary Lists the tools and language pairs available for the given tool category
     * @param {TransformApiToolLanguagePairsList0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransformApiGenerated
     */
    public toolLanguagePairsList_3(requestParameters: TransformApiToolLanguagePairsList0Request, options?: AxiosRequestConfig) {
        return TransformApiFp(this.configuration).toolLanguagePairsList_3(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
