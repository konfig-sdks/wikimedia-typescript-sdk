/* tslint:disable */
/* eslint-disable */
/*
Wikimedia

This API provides cacheable and straightforward access to Wikimedia content and data, in machine-readable formats.
### Global Rules
- Limit your clients to no more than 200 requests/s to this API.
  Each API endpoint's documentation may detail more specific usage limits.
- Set a unique `User-Agent` or `Api-User-Agent` header that
  allows us to contact you quickly. Email addresses or URLs
  of contact pages work well.

By using this API, you agree to Wikimedia's  [Terms of Use](https://wikimediafoundation.org/wiki/Terms_of_Use) and [Privacy Policy](https://wikimediafoundation.org/wiki/Privacy_policy). Unless otherwise specified in the endpoint documentation below, content accessed via this API is licensed under the [CC-BY-SA 3.0](https://creativecommons.org/licenses/by-sa/3.0/)  and [GFDL](https://www.gnu.org/copyleft/fdl.html) licenses, and you irrevocably agree to release modifications or additions made through this API under these licenses.  See https://www.mediawiki.org/wiki/REST_API for background and details.
### Endpoint documentation
Please consult each endpoint's documentation for details on:
- Licensing information for the specific type of content
  and data served via the endpoint.
- Stability markers to inform you about development status and
  change policy, according to
  [our API version policy](https://www.mediawiki.org/wiki/API_versioning).
- Endpoint specific usage limits.


The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Editors } from '../models';
// @ts-ignore
import { Problem } from '../models';
// @ts-ignore
import { TopEditorsByAbsBytesDiff } from '../models';
// @ts-ignore
import { TopEditorsByEdits } from '../models';
// @ts-ignore
import { TopEditorsByNetBytesDiff } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * EditorsDataApi - axios parameter creator
 * @export
 */
export const EditorsDataApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Given a Mediawiki project and a date range, returns a timeseries of its editors counts. You can filter by editory-type (all-editor-types, anonymous, group-bot, name-bot, user), page-type (all-page-types, content or non-content) or activity-level (1..4-edits, 5..24-edits, 25..99-edits or 100..-edits). You can choose between daily and monthly granularity as well.  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental) - Rate limit: 25 req/s - License: Data accessible via this endpoint is available under the   [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/). 
         * @summary Get editors counts for a project.
         * @param {string} project The name of any Wikimedia project formatted like {language code}.{project name}, for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped off.  For projects like commons without language codes, use commons.wikimedia. For projects like www.mediawiki.org, you can use that full string, or just use mediawiki or mediawiki.org. 
         * @param {'all-editor-types' | 'anonymous' | 'group-bot' | 'name-bot' | 'user'} editorType If you want to filter by editor-type, use one of anonymous, group-bot (registered accounts belonging to the bot group), name-bot (registered accounts not belonging to the bot group but having bot-like names) or user (registered account not in bot group nor having bot-like name). If you are interested in edits regardless of their editor-type, use all-editor-types. 
         * @param {'all-page-types' | 'content' | 'non-content'} pageType If you want to filter by page-type, use one of content (edits made in content namespaces) or non-content (edits made in non-content namespaces). If you are interested in editors regardless of their page-type, use all-page-types. 
         * @param {'all-activity-levels' | '1..4-edits' | '5..24-edits' | '25..99-edits' | '100..-edits'} activityLevel If you want to filter by activity-level, use one of 1..4-edits, 5..24-edits, 25..99-edits or 100..-edits. If you are interested in editors regardless of their activity-level, use all-activity-levels. 
         * @param {'daily' | 'monthly'} granularity The time unit for the response data. As of today, supported values are daily and monthly. 
         * @param {string} start The date of the first day to include, in YYYYMMDD format
         * @param {string} end The date of the last day to include, in YYYYMMDD format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEditorsCountsForProject: async (project: string, editorType: 'all-editor-types' | 'anonymous' | 'group-bot' | 'name-bot' | 'user', pageType: 'all-page-types' | 'content' | 'non-content', activityLevel: 'all-activity-levels' | '1..4-edits' | '5..24-edits' | '25..99-edits' | '100..-edits', granularity: 'daily' | 'monthly', start: string, end: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'project' is not null or undefined
            assertParamExists('getEditorsCountsForProject', 'project', project)
            // verify required parameter 'editorType' is not null or undefined
            assertParamExists('getEditorsCountsForProject', 'editorType', editorType)
            // verify required parameter 'pageType' is not null or undefined
            assertParamExists('getEditorsCountsForProject', 'pageType', pageType)
            // verify required parameter 'activityLevel' is not null or undefined
            assertParamExists('getEditorsCountsForProject', 'activityLevel', activityLevel)
            // verify required parameter 'granularity' is not null or undefined
            assertParamExists('getEditorsCountsForProject', 'granularity', granularity)
            // verify required parameter 'start' is not null or undefined
            assertParamExists('getEditorsCountsForProject', 'start', start)
            // verify required parameter 'end' is not null or undefined
            assertParamExists('getEditorsCountsForProject', 'end', end)
            const localVarPath = `/metrics/editors/aggregate/{project}/{editor-type}/{page-type}/{activity-level}/{granularity}/{start}/{end}`
                .replace(`{${"project"}}`, encodeURIComponent(String(project !== undefined ? project : `-project-`)))
                .replace(`{${"editor-type"}}`, encodeURIComponent(String(editorType !== undefined ? editorType : `-editor-type-`)))
                .replace(`{${"page-type"}}`, encodeURIComponent(String(pageType !== undefined ? pageType : `-page-type-`)))
                .replace(`{${"activity-level"}}`, encodeURIComponent(String(activityLevel !== undefined ? activityLevel : `-activity-level-`)))
                .replace(`{${"granularity"}}`, encodeURIComponent(String(granularity !== undefined ? granularity : `-granularity-`)))
                .replace(`{${"start"}}`, encodeURIComponent(String(start !== undefined ? start : `-start-`)))
                .replace(`{${"end"}}`, encodeURIComponent(String(end !== undefined ? end : `-end-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/metrics/editors/aggregate/{project}/{editor-type}/{page-type}/{activity-level}/{granularity}/{start}/{end}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Given a Mediawiki project and a date (day or month), returns a timeseries of the top 100 editors by absolute bytes-difference. You can filter by editor-type (all-editor-types, anonymous, group-bot, name-bot, user) or page-type (all-page-types, content or non-content). The user_text returned is either the mediawiki user_text if the user is registered, or null if user is anonymous.  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental) - Rate limit: 25 req/s - License: Data accessible via this endpoint is available under the   [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/). 
         * @summary Get top 100 editors by absolute bytes-difference.
         * @param {string} project The name of any Wikimedia project formatted like {language code}.{project name}, for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped off. For projects like commons without language codes, use commons.wikimedia. For projects like www.mediawiki.org, you can use that full string, or just use mediawiki or mediawiki.org. 
         * @param {'all-editor-types' | 'anonymous' | 'group-bot' | 'name-bot' | 'user'} editorType If you want to filter by editor-type, use one of anonymous, group-bot (registered accounts belonging to the bot group), name-bot (registered accounts not belonging to the bot group but having bot-like names) or user (registered account not in bot group nor having bot-like name). If you are interested in edits regardless of their editor-type, use all-editor-types. 
         * @param {'all-page-types' | 'content' | 'non-content'} pageType If you want to filter by page-type, use one of content (edits on pages in content namespaces) or non-content (edits on pages in non-content namespaces). If you are interested in edits regardless of their page-type, use all-page-types. 
         * @param {string} year The year of the date for which to retrieve top editors, in YYYY format.
         * @param {string} month The month of the date for which to retrieve top editors, in MM format. If you want to get the top editors of a whole month, the day parameter should be all-days.
         * @param {string} day The day of the date for which to retrieve top editors, in DD format, or all-days for a monthly value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTopByAbsoluteBytesDifference: async (project: string, editorType: 'all-editor-types' | 'anonymous' | 'group-bot' | 'name-bot' | 'user', pageType: 'all-page-types' | 'content' | 'non-content', year: string, month: string, day: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'project' is not null or undefined
            assertParamExists('getTopByAbsoluteBytesDifference', 'project', project)
            // verify required parameter 'editorType' is not null or undefined
            assertParamExists('getTopByAbsoluteBytesDifference', 'editorType', editorType)
            // verify required parameter 'pageType' is not null or undefined
            assertParamExists('getTopByAbsoluteBytesDifference', 'pageType', pageType)
            // verify required parameter 'year' is not null or undefined
            assertParamExists('getTopByAbsoluteBytesDifference', 'year', year)
            // verify required parameter 'month' is not null or undefined
            assertParamExists('getTopByAbsoluteBytesDifference', 'month', month)
            // verify required parameter 'day' is not null or undefined
            assertParamExists('getTopByAbsoluteBytesDifference', 'day', day)
            const localVarPath = `/metrics/editors/top-by-absolute-bytes-difference/{project}/{editor-type}/{page-type}/{year}/{month}/{day}`
                .replace(`{${"project"}}`, encodeURIComponent(String(project !== undefined ? project : `-project-`)))
                .replace(`{${"editor-type"}}`, encodeURIComponent(String(editorType !== undefined ? editorType : `-editor-type-`)))
                .replace(`{${"page-type"}}`, encodeURIComponent(String(pageType !== undefined ? pageType : `-page-type-`)))
                .replace(`{${"year"}}`, encodeURIComponent(String(year !== undefined ? year : `-year-`)))
                .replace(`{${"month"}}`, encodeURIComponent(String(month !== undefined ? month : `-month-`)))
                .replace(`{${"day"}}`, encodeURIComponent(String(day !== undefined ? day : `-day-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/metrics/editors/top-by-absolute-bytes-difference/{project}/{editor-type}/{page-type}/{year}/{month}/{day}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Given a Mediawiki project and a date (day or month), returns a timeseries of the top 100 editors by net bytes-difference. You can filter by editor-type (all-editor-types, anonymous, group-bot, name-bot, user) or page-type (all-page-types, content or non-content). The user_text returned is either the mediawiki user_text if the user is registered, or \"Anonymous Editor\" if user is anonymous.  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental) - Rate limit: 25 req/s - License: Data accessible via this endpoint is available under the   [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/). 
         * @summary Get top 100 editors by net bytes-difference.
         * @param {string} project The name of any Wikimedia project formatted like {language code}.{project name}, for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped off. For projects like commons without language codes, use commons.wikimedia. For projects like www.mediawiki.org, you can use that full string, or just use mediawiki or mediawiki.org. 
         * @param {'all-editor-types' | 'anonymous' | 'group-bot' | 'name-bot' | 'user'} editorType If you want to filter by editor-type, use one of anonymous, group-bot (registered accounts belonging to the bot group), name-bot (registered accounts not belonging to the bot group but having bot-like names) or user (registered account not in bot group nor having bot-like name). If you are interested in edits regardless of their editor-type, use all-editor-types. 
         * @param {'all-page-types' | 'content' | 'non-content'} pageType If you want to filter by page-type, use one of content (edits on pages in content namespaces) or non-content (edits on pages in non-content namespaces). If you are interested in edits regardless of their page-type, use all-page-types. 
         * @param {string} year The year of the date for which to retrieve top editors, in YYYY format.
         * @param {string} month The month of the date for which to retrieve top editors, in MM format. If you want to get the top editors of a whole month, the day parameter should be all-days.
         * @param {string} day The day of the date for which to retrieve top editors, in DD format, or all-days for a monthly value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTopByNetBytesDifference: async (project: string, editorType: 'all-editor-types' | 'anonymous' | 'group-bot' | 'name-bot' | 'user', pageType: 'all-page-types' | 'content' | 'non-content', year: string, month: string, day: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'project' is not null or undefined
            assertParamExists('getTopByNetBytesDifference', 'project', project)
            // verify required parameter 'editorType' is not null or undefined
            assertParamExists('getTopByNetBytesDifference', 'editorType', editorType)
            // verify required parameter 'pageType' is not null or undefined
            assertParamExists('getTopByNetBytesDifference', 'pageType', pageType)
            // verify required parameter 'year' is not null or undefined
            assertParamExists('getTopByNetBytesDifference', 'year', year)
            // verify required parameter 'month' is not null or undefined
            assertParamExists('getTopByNetBytesDifference', 'month', month)
            // verify required parameter 'day' is not null or undefined
            assertParamExists('getTopByNetBytesDifference', 'day', day)
            const localVarPath = `/metrics/editors/top-by-net-bytes-difference/{project}/{editor-type}/{page-type}/{year}/{month}/{day}`
                .replace(`{${"project"}}`, encodeURIComponent(String(project !== undefined ? project : `-project-`)))
                .replace(`{${"editor-type"}}`, encodeURIComponent(String(editorType !== undefined ? editorType : `-editor-type-`)))
                .replace(`{${"page-type"}}`, encodeURIComponent(String(pageType !== undefined ? pageType : `-page-type-`)))
                .replace(`{${"year"}}`, encodeURIComponent(String(year !== undefined ? year : `-year-`)))
                .replace(`{${"month"}}`, encodeURIComponent(String(month !== undefined ? month : `-month-`)))
                .replace(`{${"day"}}`, encodeURIComponent(String(day !== undefined ? day : `-day-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/metrics/editors/top-by-net-bytes-difference/{project}/{editor-type}/{page-type}/{year}/{month}/{day}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Given a Mediawiki project and a date (day or month), returns a timeseries of the top 100 editors by edits count. You can filter by editor-type (all-editor-types, anonymous, group-bot, name-bot, user) or page-type (all-page-types, content or non-content). The user_text returned is either the mediawiki user_text if the user is registered, or null if user is anonymous.  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental) - Rate limit: 25 req/s - License: Data accessible via this endpoint is available under the   [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/). 
         * @summary Get top 100 editors by edits count.
         * @param {string} project The name of any Wikimedia project formatted like {language code}.{project name}, for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped off. For projects like commons without language codes, use commons.wikimedia. For projects like www.mediawiki.org, you can use that full string, or just use mediawiki or mediawiki.org. 
         * @param {'all-editor-types' | 'anonymous' | 'group-bot' | 'name-bot' | 'user'} editorType If you want to filter by editor-type, use one of anonymous, group-bot (registered accounts belonging to the bot group), name-bot (registered accounts not belonging to the bot group but having bot-like names) or user (registered account not in bot group nor having bot-like name). If you are interested in edits regardless of their editor-type, use all-editor-types. 
         * @param {'all-page-types' | 'content' | 'non-content'} pageType If you want to filter by page-type, use one of content (edits on pages in content namespaces) or non-content (edits on pages in non-content namespaces). If you are interested in edits regardless of their page-type, use all-page-types. 
         * @param {string} year The year of the date for which to retrieve top editors, in YYYY format.
         * @param {string} month The month of the date for which to retrieve top editors, in MM format. If you want to get the top editors of a whole month, the day parameter should be all-days.
         * @param {string} day The day of the date for which to retrieve top editors, in DD format, or all-days for a monthly value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTopEditorsByEditsCount: async (project: string, editorType: 'all-editor-types' | 'anonymous' | 'group-bot' | 'name-bot' | 'user', pageType: 'all-page-types' | 'content' | 'non-content', year: string, month: string, day: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'project' is not null or undefined
            assertParamExists('getTopEditorsByEditsCount', 'project', project)
            // verify required parameter 'editorType' is not null or undefined
            assertParamExists('getTopEditorsByEditsCount', 'editorType', editorType)
            // verify required parameter 'pageType' is not null or undefined
            assertParamExists('getTopEditorsByEditsCount', 'pageType', pageType)
            // verify required parameter 'year' is not null or undefined
            assertParamExists('getTopEditorsByEditsCount', 'year', year)
            // verify required parameter 'month' is not null or undefined
            assertParamExists('getTopEditorsByEditsCount', 'month', month)
            // verify required parameter 'day' is not null or undefined
            assertParamExists('getTopEditorsByEditsCount', 'day', day)
            const localVarPath = `/metrics/editors/top-by-edits/{project}/{editor-type}/{page-type}/{year}/{month}/{day}`
                .replace(`{${"project"}}`, encodeURIComponent(String(project !== undefined ? project : `-project-`)))
                .replace(`{${"editor-type"}}`, encodeURIComponent(String(editorType !== undefined ? editorType : `-editor-type-`)))
                .replace(`{${"page-type"}}`, encodeURIComponent(String(pageType !== undefined ? pageType : `-page-type-`)))
                .replace(`{${"year"}}`, encodeURIComponent(String(year !== undefined ? year : `-year-`)))
                .replace(`{${"month"}}`, encodeURIComponent(String(month !== undefined ? month : `-month-`)))
                .replace(`{${"day"}}`, encodeURIComponent(String(day !== undefined ? day : `-day-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/metrics/editors/top-by-edits/{project}/{editor-type}/{page-type}/{year}/{month}/{day}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EditorsDataApi - functional programming interface
 * @export
 */
export const EditorsDataApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EditorsDataApiAxiosParamCreator(configuration)
    return {
        /**
         * Given a Mediawiki project and a date range, returns a timeseries of its editors counts. You can filter by editory-type (all-editor-types, anonymous, group-bot, name-bot, user), page-type (all-page-types, content or non-content) or activity-level (1..4-edits, 5..24-edits, 25..99-edits or 100..-edits). You can choose between daily and monthly granularity as well.  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental) - Rate limit: 25 req/s - License: Data accessible via this endpoint is available under the   [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/). 
         * @summary Get editors counts for a project.
         * @param {EditorsDataApiGetEditorsCountsForProjectRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEditorsCountsForProject(requestParameters: EditorsDataApiGetEditorsCountsForProjectRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEditorsCountsForProject(requestParameters.project, requestParameters.editorType, requestParameters.pageType, requestParameters.activityLevel, requestParameters.granularity, requestParameters.start, requestParameters.end, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Given a Mediawiki project and a date (day or month), returns a timeseries of the top 100 editors by absolute bytes-difference. You can filter by editor-type (all-editor-types, anonymous, group-bot, name-bot, user) or page-type (all-page-types, content or non-content). The user_text returned is either the mediawiki user_text if the user is registered, or null if user is anonymous.  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental) - Rate limit: 25 req/s - License: Data accessible via this endpoint is available under the   [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/). 
         * @summary Get top 100 editors by absolute bytes-difference.
         * @param {EditorsDataApiGetTopByAbsoluteBytesDifferenceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTopByAbsoluteBytesDifference(requestParameters: EditorsDataApiGetTopByAbsoluteBytesDifferenceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTopByAbsoluteBytesDifference(requestParameters.project, requestParameters.editorType, requestParameters.pageType, requestParameters.year, requestParameters.month, requestParameters.day, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Given a Mediawiki project and a date (day or month), returns a timeseries of the top 100 editors by net bytes-difference. You can filter by editor-type (all-editor-types, anonymous, group-bot, name-bot, user) or page-type (all-page-types, content or non-content). The user_text returned is either the mediawiki user_text if the user is registered, or \"Anonymous Editor\" if user is anonymous.  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental) - Rate limit: 25 req/s - License: Data accessible via this endpoint is available under the   [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/). 
         * @summary Get top 100 editors by net bytes-difference.
         * @param {EditorsDataApiGetTopByNetBytesDifferenceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTopByNetBytesDifference(requestParameters: EditorsDataApiGetTopByNetBytesDifferenceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTopByNetBytesDifference(requestParameters.project, requestParameters.editorType, requestParameters.pageType, requestParameters.year, requestParameters.month, requestParameters.day, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Given a Mediawiki project and a date (day or month), returns a timeseries of the top 100 editors by edits count. You can filter by editor-type (all-editor-types, anonymous, group-bot, name-bot, user) or page-type (all-page-types, content or non-content). The user_text returned is either the mediawiki user_text if the user is registered, or null if user is anonymous.  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental) - Rate limit: 25 req/s - License: Data accessible via this endpoint is available under the   [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/). 
         * @summary Get top 100 editors by edits count.
         * @param {EditorsDataApiGetTopEditorsByEditsCountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTopEditorsByEditsCount(requestParameters: EditorsDataApiGetTopEditorsByEditsCountRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTopEditorsByEditsCount(requestParameters.project, requestParameters.editorType, requestParameters.pageType, requestParameters.year, requestParameters.month, requestParameters.day, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EditorsDataApi - factory interface
 * @export
 */
export const EditorsDataApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EditorsDataApiFp(configuration)
    return {
        /**
         * Given a Mediawiki project and a date range, returns a timeseries of its editors counts. You can filter by editory-type (all-editor-types, anonymous, group-bot, name-bot, user), page-type (all-page-types, content or non-content) or activity-level (1..4-edits, 5..24-edits, 25..99-edits or 100..-edits). You can choose between daily and monthly granularity as well.  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental) - Rate limit: 25 req/s - License: Data accessible via this endpoint is available under the   [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/). 
         * @summary Get editors counts for a project.
         * @param {EditorsDataApiGetEditorsCountsForProjectRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEditorsCountsForProject(requestParameters: EditorsDataApiGetEditorsCountsForProjectRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getEditorsCountsForProject(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Given a Mediawiki project and a date (day or month), returns a timeseries of the top 100 editors by absolute bytes-difference. You can filter by editor-type (all-editor-types, anonymous, group-bot, name-bot, user) or page-type (all-page-types, content or non-content). The user_text returned is either the mediawiki user_text if the user is registered, or null if user is anonymous.  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental) - Rate limit: 25 req/s - License: Data accessible via this endpoint is available under the   [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/). 
         * @summary Get top 100 editors by absolute bytes-difference.
         * @param {EditorsDataApiGetTopByAbsoluteBytesDifferenceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTopByAbsoluteBytesDifference(requestParameters: EditorsDataApiGetTopByAbsoluteBytesDifferenceRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getTopByAbsoluteBytesDifference(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Given a Mediawiki project and a date (day or month), returns a timeseries of the top 100 editors by net bytes-difference. You can filter by editor-type (all-editor-types, anonymous, group-bot, name-bot, user) or page-type (all-page-types, content or non-content). The user_text returned is either the mediawiki user_text if the user is registered, or \"Anonymous Editor\" if user is anonymous.  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental) - Rate limit: 25 req/s - License: Data accessible via this endpoint is available under the   [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/). 
         * @summary Get top 100 editors by net bytes-difference.
         * @param {EditorsDataApiGetTopByNetBytesDifferenceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTopByNetBytesDifference(requestParameters: EditorsDataApiGetTopByNetBytesDifferenceRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getTopByNetBytesDifference(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Given a Mediawiki project and a date (day or month), returns a timeseries of the top 100 editors by edits count. You can filter by editor-type (all-editor-types, anonymous, group-bot, name-bot, user) or page-type (all-page-types, content or non-content). The user_text returned is either the mediawiki user_text if the user is registered, or null if user is anonymous.  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental) - Rate limit: 25 req/s - License: Data accessible via this endpoint is available under the   [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/). 
         * @summary Get top 100 editors by edits count.
         * @param {EditorsDataApiGetTopEditorsByEditsCountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTopEditorsByEditsCount(requestParameters: EditorsDataApiGetTopEditorsByEditsCountRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getTopEditorsByEditsCount(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getEditorsCountsForProject operation in EditorsDataApi.
 * @export
 * @interface EditorsDataApiGetEditorsCountsForProjectRequest
 */
export type EditorsDataApiGetEditorsCountsForProjectRequest = {
    
    /**
    * The name of any Wikimedia project formatted like {language code}.{project name}, for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped off.  For projects like commons without language codes, use commons.wikimedia. For projects like www.mediawiki.org, you can use that full string, or just use mediawiki or mediawiki.org. 
    * @type {string}
    * @memberof EditorsDataApiGetEditorsCountsForProject
    */
    readonly project: string
    
    /**
    * If you want to filter by editor-type, use one of anonymous, group-bot (registered accounts belonging to the bot group), name-bot (registered accounts not belonging to the bot group but having bot-like names) or user (registered account not in bot group nor having bot-like name). If you are interested in edits regardless of their editor-type, use all-editor-types. 
    * @type {'all-editor-types' | 'anonymous' | 'group-bot' | 'name-bot' | 'user'}
    * @memberof EditorsDataApiGetEditorsCountsForProject
    */
    readonly editorType: 'all-editor-types' | 'anonymous' | 'group-bot' | 'name-bot' | 'user'
    
    /**
    * If you want to filter by page-type, use one of content (edits made in content namespaces) or non-content (edits made in non-content namespaces). If you are interested in editors regardless of their page-type, use all-page-types. 
    * @type {'all-page-types' | 'content' | 'non-content'}
    * @memberof EditorsDataApiGetEditorsCountsForProject
    */
    readonly pageType: 'all-page-types' | 'content' | 'non-content'
    
    /**
    * If you want to filter by activity-level, use one of 1..4-edits, 5..24-edits, 25..99-edits or 100..-edits. If you are interested in editors regardless of their activity-level, use all-activity-levels. 
    * @type {'all-activity-levels' | '1..4-edits' | '5..24-edits' | '25..99-edits' | '100..-edits'}
    * @memberof EditorsDataApiGetEditorsCountsForProject
    */
    readonly activityLevel: 'all-activity-levels' | '1..4-edits' | '5..24-edits' | '25..99-edits' | '100..-edits'
    
    /**
    * The time unit for the response data. As of today, supported values are daily and monthly. 
    * @type {'daily' | 'monthly'}
    * @memberof EditorsDataApiGetEditorsCountsForProject
    */
    readonly granularity: 'daily' | 'monthly'
    
    /**
    * The date of the first day to include, in YYYYMMDD format
    * @type {string}
    * @memberof EditorsDataApiGetEditorsCountsForProject
    */
    readonly start: string
    
    /**
    * The date of the last day to include, in YYYYMMDD format
    * @type {string}
    * @memberof EditorsDataApiGetEditorsCountsForProject
    */
    readonly end: string
    
}

/**
 * Request parameters for getTopByAbsoluteBytesDifference operation in EditorsDataApi.
 * @export
 * @interface EditorsDataApiGetTopByAbsoluteBytesDifferenceRequest
 */
export type EditorsDataApiGetTopByAbsoluteBytesDifferenceRequest = {
    
    /**
    * The name of any Wikimedia project formatted like {language code}.{project name}, for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped off. For projects like commons without language codes, use commons.wikimedia. For projects like www.mediawiki.org, you can use that full string, or just use mediawiki or mediawiki.org. 
    * @type {string}
    * @memberof EditorsDataApiGetTopByAbsoluteBytesDifference
    */
    readonly project: string
    
    /**
    * If you want to filter by editor-type, use one of anonymous, group-bot (registered accounts belonging to the bot group), name-bot (registered accounts not belonging to the bot group but having bot-like names) or user (registered account not in bot group nor having bot-like name). If you are interested in edits regardless of their editor-type, use all-editor-types. 
    * @type {'all-editor-types' | 'anonymous' | 'group-bot' | 'name-bot' | 'user'}
    * @memberof EditorsDataApiGetTopByAbsoluteBytesDifference
    */
    readonly editorType: 'all-editor-types' | 'anonymous' | 'group-bot' | 'name-bot' | 'user'
    
    /**
    * If you want to filter by page-type, use one of content (edits on pages in content namespaces) or non-content (edits on pages in non-content namespaces). If you are interested in edits regardless of their page-type, use all-page-types. 
    * @type {'all-page-types' | 'content' | 'non-content'}
    * @memberof EditorsDataApiGetTopByAbsoluteBytesDifference
    */
    readonly pageType: 'all-page-types' | 'content' | 'non-content'
    
    /**
    * The year of the date for which to retrieve top editors, in YYYY format.
    * @type {string}
    * @memberof EditorsDataApiGetTopByAbsoluteBytesDifference
    */
    readonly year: string
    
    /**
    * The month of the date for which to retrieve top editors, in MM format. If you want to get the top editors of a whole month, the day parameter should be all-days.
    * @type {string}
    * @memberof EditorsDataApiGetTopByAbsoluteBytesDifference
    */
    readonly month: string
    
    /**
    * The day of the date for which to retrieve top editors, in DD format, or all-days for a monthly value.
    * @type {string}
    * @memberof EditorsDataApiGetTopByAbsoluteBytesDifference
    */
    readonly day: string
    
}

/**
 * Request parameters for getTopByNetBytesDifference operation in EditorsDataApi.
 * @export
 * @interface EditorsDataApiGetTopByNetBytesDifferenceRequest
 */
export type EditorsDataApiGetTopByNetBytesDifferenceRequest = {
    
    /**
    * The name of any Wikimedia project formatted like {language code}.{project name}, for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped off. For projects like commons without language codes, use commons.wikimedia. For projects like www.mediawiki.org, you can use that full string, or just use mediawiki or mediawiki.org. 
    * @type {string}
    * @memberof EditorsDataApiGetTopByNetBytesDifference
    */
    readonly project: string
    
    /**
    * If you want to filter by editor-type, use one of anonymous, group-bot (registered accounts belonging to the bot group), name-bot (registered accounts not belonging to the bot group but having bot-like names) or user (registered account not in bot group nor having bot-like name). If you are interested in edits regardless of their editor-type, use all-editor-types. 
    * @type {'all-editor-types' | 'anonymous' | 'group-bot' | 'name-bot' | 'user'}
    * @memberof EditorsDataApiGetTopByNetBytesDifference
    */
    readonly editorType: 'all-editor-types' | 'anonymous' | 'group-bot' | 'name-bot' | 'user'
    
    /**
    * If you want to filter by page-type, use one of content (edits on pages in content namespaces) or non-content (edits on pages in non-content namespaces). If you are interested in edits regardless of their page-type, use all-page-types. 
    * @type {'all-page-types' | 'content' | 'non-content'}
    * @memberof EditorsDataApiGetTopByNetBytesDifference
    */
    readonly pageType: 'all-page-types' | 'content' | 'non-content'
    
    /**
    * The year of the date for which to retrieve top editors, in YYYY format.
    * @type {string}
    * @memberof EditorsDataApiGetTopByNetBytesDifference
    */
    readonly year: string
    
    /**
    * The month of the date for which to retrieve top editors, in MM format. If you want to get the top editors of a whole month, the day parameter should be all-days.
    * @type {string}
    * @memberof EditorsDataApiGetTopByNetBytesDifference
    */
    readonly month: string
    
    /**
    * The day of the date for which to retrieve top editors, in DD format, or all-days for a monthly value.
    * @type {string}
    * @memberof EditorsDataApiGetTopByNetBytesDifference
    */
    readonly day: string
    
}

/**
 * Request parameters for getTopEditorsByEditsCount operation in EditorsDataApi.
 * @export
 * @interface EditorsDataApiGetTopEditorsByEditsCountRequest
 */
export type EditorsDataApiGetTopEditorsByEditsCountRequest = {
    
    /**
    * The name of any Wikimedia project formatted like {language code}.{project name}, for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped off. For projects like commons without language codes, use commons.wikimedia. For projects like www.mediawiki.org, you can use that full string, or just use mediawiki or mediawiki.org. 
    * @type {string}
    * @memberof EditorsDataApiGetTopEditorsByEditsCount
    */
    readonly project: string
    
    /**
    * If you want to filter by editor-type, use one of anonymous, group-bot (registered accounts belonging to the bot group), name-bot (registered accounts not belonging to the bot group but having bot-like names) or user (registered account not in bot group nor having bot-like name). If you are interested in edits regardless of their editor-type, use all-editor-types. 
    * @type {'all-editor-types' | 'anonymous' | 'group-bot' | 'name-bot' | 'user'}
    * @memberof EditorsDataApiGetTopEditorsByEditsCount
    */
    readonly editorType: 'all-editor-types' | 'anonymous' | 'group-bot' | 'name-bot' | 'user'
    
    /**
    * If you want to filter by page-type, use one of content (edits on pages in content namespaces) or non-content (edits on pages in non-content namespaces). If you are interested in edits regardless of their page-type, use all-page-types. 
    * @type {'all-page-types' | 'content' | 'non-content'}
    * @memberof EditorsDataApiGetTopEditorsByEditsCount
    */
    readonly pageType: 'all-page-types' | 'content' | 'non-content'
    
    /**
    * The year of the date for which to retrieve top editors, in YYYY format.
    * @type {string}
    * @memberof EditorsDataApiGetTopEditorsByEditsCount
    */
    readonly year: string
    
    /**
    * The month of the date for which to retrieve top editors, in MM format. If you want to get the top editors of a whole month, the day parameter should be all-days.
    * @type {string}
    * @memberof EditorsDataApiGetTopEditorsByEditsCount
    */
    readonly month: string
    
    /**
    * The day of the date for which to retrieve top editors, in DD format, or all-days for a monthly value.
    * @type {string}
    * @memberof EditorsDataApiGetTopEditorsByEditsCount
    */
    readonly day: string
    
}

/**
 * EditorsDataApiGenerated - object-oriented interface
 * @export
 * @class EditorsDataApiGenerated
 * @extends {BaseAPI}
 */
export class EditorsDataApiGenerated extends BaseAPI {
    /**
     * Given a Mediawiki project and a date range, returns a timeseries of its editors counts. You can filter by editory-type (all-editor-types, anonymous, group-bot, name-bot, user), page-type (all-page-types, content or non-content) or activity-level (1..4-edits, 5..24-edits, 25..99-edits or 100..-edits). You can choose between daily and monthly granularity as well.  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental) - Rate limit: 25 req/s - License: Data accessible via this endpoint is available under the   [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/). 
     * @summary Get editors counts for a project.
     * @param {EditorsDataApiGetEditorsCountsForProjectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EditorsDataApiGenerated
     */
    public getEditorsCountsForProject(requestParameters: EditorsDataApiGetEditorsCountsForProjectRequest, options?: AxiosRequestConfig) {
        return EditorsDataApiFp(this.configuration).getEditorsCountsForProject(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Given a Mediawiki project and a date (day or month), returns a timeseries of the top 100 editors by absolute bytes-difference. You can filter by editor-type (all-editor-types, anonymous, group-bot, name-bot, user) or page-type (all-page-types, content or non-content). The user_text returned is either the mediawiki user_text if the user is registered, or null if user is anonymous.  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental) - Rate limit: 25 req/s - License: Data accessible via this endpoint is available under the   [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/). 
     * @summary Get top 100 editors by absolute bytes-difference.
     * @param {EditorsDataApiGetTopByAbsoluteBytesDifferenceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EditorsDataApiGenerated
     */
    public getTopByAbsoluteBytesDifference(requestParameters: EditorsDataApiGetTopByAbsoluteBytesDifferenceRequest, options?: AxiosRequestConfig) {
        return EditorsDataApiFp(this.configuration).getTopByAbsoluteBytesDifference(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Given a Mediawiki project and a date (day or month), returns a timeseries of the top 100 editors by net bytes-difference. You can filter by editor-type (all-editor-types, anonymous, group-bot, name-bot, user) or page-type (all-page-types, content or non-content). The user_text returned is either the mediawiki user_text if the user is registered, or \"Anonymous Editor\" if user is anonymous.  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental) - Rate limit: 25 req/s - License: Data accessible via this endpoint is available under the   [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/). 
     * @summary Get top 100 editors by net bytes-difference.
     * @param {EditorsDataApiGetTopByNetBytesDifferenceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EditorsDataApiGenerated
     */
    public getTopByNetBytesDifference(requestParameters: EditorsDataApiGetTopByNetBytesDifferenceRequest, options?: AxiosRequestConfig) {
        return EditorsDataApiFp(this.configuration).getTopByNetBytesDifference(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Given a Mediawiki project and a date (day or month), returns a timeseries of the top 100 editors by edits count. You can filter by editor-type (all-editor-types, anonymous, group-bot, name-bot, user) or page-type (all-page-types, content or non-content). The user_text returned is either the mediawiki user_text if the user is registered, or null if user is anonymous.  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental) - Rate limit: 25 req/s - License: Data accessible via this endpoint is available under the   [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/). 
     * @summary Get top 100 editors by edits count.
     * @param {EditorsDataApiGetTopEditorsByEditsCountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EditorsDataApiGenerated
     */
    public getTopEditorsByEditsCount(requestParameters: EditorsDataApiGetTopEditorsByEditsCountRequest, options?: AxiosRequestConfig) {
        return EditorsDataApiFp(this.configuration).getTopEditorsByEditsCount(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
