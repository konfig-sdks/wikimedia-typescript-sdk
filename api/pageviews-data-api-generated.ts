/* tslint:disable */
/* eslint-disable */
/*
Wikimedia

This API provides cacheable and straightforward access to Wikimedia content and data, in machine-readable formats.
### Global Rules
- Limit your clients to no more than 200 requests/s to this API.
  Each API endpoint's documentation may detail more specific usage limits.
- Set a unique `User-Agent` or `Api-User-Agent` header that
  allows us to contact you quickly. Email addresses or URLs
  of contact pages work well.

By using this API, you agree to Wikimedia's  [Terms of Use](https://wikimediafoundation.org/wiki/Terms_of_Use) and [Privacy Policy](https://wikimediafoundation.org/wiki/Privacy_policy). Unless otherwise specified in the endpoint documentation below, content accessed via this API is licensed under the [CC-BY-SA 3.0](https://creativecommons.org/licenses/by-sa/3.0/)  and [GFDL](https://www.gnu.org/copyleft/fdl.html) licenses, and you irrevocably agree to release modifications or additions made through this API under these licenses.  See https://www.mediawiki.org/wiki/REST_API for background and details.
### Endpoint documentation
Please consult each endpoint's documentation for details on:
- Licensing information for the specific type of content
  and data served via the endpoint.
- Stability markers to inform you about development status and
  change policy, according to
  [our API version policy](https://www.mediawiki.org/wiki/API_versioning).
- Endpoint specific usage limits.


The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ByCountry } from '../models';
// @ts-ignore
import { PageviewArticle } from '../models';
// @ts-ignore
import { PageviewProject } from '../models';
// @ts-ignore
import { PageviewTops } from '../models';
// @ts-ignore
import { Problem } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * PageviewsDataApi - axios parameter creator
 * @export
 */
export const PageviewsDataApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Given a Mediawiki article and a date range, returns a daily timeseries of its pageview counts. You can also filter by access method and/or agent type.  - Stability: [stable](https://www.mediawiki.org/wiki/API_versioning#Stable) - Rate limit: 100 req/s - License: Data accessible via this endpoint is available under the   [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/). 
         * @summary Get pageview counts for a page.
         * @param {string} project If you want to filter by project, use the domain of any Wikimedia project, for example \&#39;en.wikipedia.org\&#39;, \&#39;www.mediawiki.org\&#39; or \&#39;commons.wikimedia.org\&#39;. 
         * @param {'all-access' | 'desktop' | 'mobile-app' | 'mobile-web'} access If you want to filter by access method, use one of desktop, mobile-app or mobile-web. If you are interested in pageviews regardless of access method, use all-access. 
         * @param {'all-agents' | 'user' | 'spider' | 'bot'} agent If you want to filter by agent type, use one of user, bot or spider. If you are interested in pageviews regardless of agent type, use all-agents. 
         * @param {string} article \&#39;The title of any article in the specified project. Any spaces should be replaced with underscores. It also should be URI-encoded, so that non-URI-safe characters like %, / or ? are accepted. Example: Are_You_the_One%3F\&#39;. 
         * @param {'daily' | 'monthly'} granularity The time unit for the response data. As of today, the only supported granularity for this endpoint is daily and monthly. 
         * @param {string} start The date of the first day to include, in YYYYMMDD or YYYYMMDDHH format
         * @param {string} end The date of the last day to include, in YYYYMMDD or YYYYMMDDHH format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPageviewCountsByArticleDateRange: async (project: string, access: 'all-access' | 'desktop' | 'mobile-app' | 'mobile-web', agent: 'all-agents' | 'user' | 'spider' | 'bot', article: string, granularity: 'daily' | 'monthly', start: string, end: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'project' is not null or undefined
            assertParamExists('getPageviewCountsByArticleDateRange', 'project', project)
            // verify required parameter 'access' is not null or undefined
            assertParamExists('getPageviewCountsByArticleDateRange', 'access', access)
            // verify required parameter 'agent' is not null or undefined
            assertParamExists('getPageviewCountsByArticleDateRange', 'agent', agent)
            // verify required parameter 'article' is not null or undefined
            assertParamExists('getPageviewCountsByArticleDateRange', 'article', article)
            // verify required parameter 'granularity' is not null or undefined
            assertParamExists('getPageviewCountsByArticleDateRange', 'granularity', granularity)
            // verify required parameter 'start' is not null or undefined
            assertParamExists('getPageviewCountsByArticleDateRange', 'start', start)
            // verify required parameter 'end' is not null or undefined
            assertParamExists('getPageviewCountsByArticleDateRange', 'end', end)
            const localVarPath = `/metrics/pageviews/per-article/{project}/{access}/{agent}/{article}/{granularity}/{start}/{end}`
                .replace(`{${"project"}}`, encodeURIComponent(String(project !== undefined ? project : `-project-`)))
                .replace(`{${"access"}}`, encodeURIComponent(String(access !== undefined ? access : `-access-`)))
                .replace(`{${"agent"}}`, encodeURIComponent(String(agent !== undefined ? agent : `-agent-`)))
                .replace(`{${"article"}}`, encodeURIComponent(String(article !== undefined ? article : `-article-`)))
                .replace(`{${"granularity"}}`, encodeURIComponent(String(granularity !== undefined ? granularity : `-granularity-`)))
                .replace(`{${"start"}}`, encodeURIComponent(String(start !== undefined ? start : `-start-`)))
                .replace(`{${"end"}}`, encodeURIComponent(String(end !== undefined ? end : `-end-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/metrics/pageviews/per-article/{project}/{access}/{agent}/{article}/{granularity}/{start}/{end}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Given a date range, returns a timeseries of pageview counts. You can filter by project, access method and/or agent type. You can choose between daily and hourly granularity as well.  - Stability: [stable](https://www.mediawiki.org/wiki/API_versioning#Stable) - Rate limit: 100 req/s - License: Data accessible via this endpoint is available under the   [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/). 
         * @summary Get pageview counts for a project.
         * @param {string} project If you want to filter by project, use the domain of any Wikimedia project, for example \&#39;en.wikipedia.org\&#39;, \&#39;www.mediawiki.org\&#39; or \&#39;commons.wikimedia.org\&#39;. If you are interested in all pageviews regardless of project, use all-projects. 
         * @param {'all-access' | 'desktop' | 'mobile-app' | 'mobile-web'} access If you want to filter by access method, use one of desktop, mobile-app or mobile-web. If you are interested in pageviews regardless of access method, use all-access. 
         * @param {'all-agents' | 'user' | 'spider'} agent If you want to filter by agent type, use one of user or spider. If you are interested in pageviews regardless of agent type, use all-agents. 
         * @param {'hourly' | 'daily' | 'monthly'} granularity The time unit for the response data. As of today, the supported granularities for this endpoint are hourly, daily, and monthly. 
         * @param {string} start The timestamp of the first hour/day/month to include, in YYYYMMDDHH format
         * @param {string} end The timestamp of the last hour/day/month to include, in YYYYMMDDHH format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPageviewCountsByProject: async (project: string, access: 'all-access' | 'desktop' | 'mobile-app' | 'mobile-web', agent: 'all-agents' | 'user' | 'spider', granularity: 'hourly' | 'daily' | 'monthly', start: string, end: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'project' is not null or undefined
            assertParamExists('getPageviewCountsByProject', 'project', project)
            // verify required parameter 'access' is not null or undefined
            assertParamExists('getPageviewCountsByProject', 'access', access)
            // verify required parameter 'agent' is not null or undefined
            assertParamExists('getPageviewCountsByProject', 'agent', agent)
            // verify required parameter 'granularity' is not null or undefined
            assertParamExists('getPageviewCountsByProject', 'granularity', granularity)
            // verify required parameter 'start' is not null or undefined
            assertParamExists('getPageviewCountsByProject', 'start', start)
            // verify required parameter 'end' is not null or undefined
            assertParamExists('getPageviewCountsByProject', 'end', end)
            const localVarPath = `/metrics/pageviews/aggregate/{project}/{access}/{agent}/{granularity}/{start}/{end}`
                .replace(`{${"project"}}`, encodeURIComponent(String(project !== undefined ? project : `-project-`)))
                .replace(`{${"access"}}`, encodeURIComponent(String(access !== undefined ? access : `-access-`)))
                .replace(`{${"agent"}}`, encodeURIComponent(String(agent !== undefined ? agent : `-agent-`)))
                .replace(`{${"granularity"}}`, encodeURIComponent(String(granularity !== undefined ? granularity : `-granularity-`)))
                .replace(`{${"start"}}`, encodeURIComponent(String(start !== undefined ? start : `-start-`)))
                .replace(`{${"end"}}`, encodeURIComponent(String(end !== undefined ? end : `-end-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/metrics/pageviews/aggregate/{project}/{access}/{agent}/{granularity}/{start}/{end}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists the pageviews to this project, split by country of origin for a given month. Because of privacy reasons, pageviews are given in a bucketed format, and countries with less than 100 views do not get reported. Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental) - Rate limit: 100 req/s - License: Data accessible via this endpoint is available under the   [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/). 
         * @summary Get pageviews by country and access method.
         * @param {string} project If you want to filter by project, use the domain of any Wikimedia project, for example \&#39;en.wikipedia.org\&#39;, \&#39;www.mediawiki.org\&#39; or \&#39;commons.wikimedia.org\&#39;. 
         * @param {'all-access' | 'desktop' | 'mobile-app' | 'mobile-web'} access If you want to filter by access method, use one of desktop, mobile-app or mobile-web. If you are interested in pageviews regardless of access method, use all-access. 
         * @param {string} year The year of the date for which to retrieve top countries, in YYYY format.
         * @param {string} month The month of the date for which to retrieve top countries, in MM format. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listByCountryAndAccess: async (project: string, access: 'all-access' | 'desktop' | 'mobile-app' | 'mobile-web', year: string, month: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'project' is not null or undefined
            assertParamExists('listByCountryAndAccess', 'project', project)
            // verify required parameter 'access' is not null or undefined
            assertParamExists('listByCountryAndAccess', 'access', access)
            // verify required parameter 'year' is not null or undefined
            assertParamExists('listByCountryAndAccess', 'year', year)
            // verify required parameter 'month' is not null or undefined
            assertParamExists('listByCountryAndAccess', 'month', month)
            const localVarPath = `/metrics/pageviews/top-by-country/{project}/{access}/{year}/{month}`
                .replace(`{${"project"}}`, encodeURIComponent(String(project !== undefined ? project : `-project-`)))
                .replace(`{${"access"}}`, encodeURIComponent(String(access !== undefined ? access : `-access-`)))
                .replace(`{${"year"}}`, encodeURIComponent(String(year !== undefined ? year : `-year-`)))
                .replace(`{${"month"}}`, encodeURIComponent(String(month !== undefined ? month : `-month-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/metrics/pageviews/top-by-country/{project}/{access}/{year}/{month}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists the 1000 most viewed articles for a given project and timespan (month or day). You can filter by access method.  - Stability: [stable](https://www.mediawiki.org/wiki/API_versioning#Stable) - Rate limit: 100 req/s - License: Data accessible via this endpoint is available under the   [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/). 
         * @summary Get the most viewed articles for a project.
         * @param {string} project If you want to filter by project, use the domain of any Wikimedia project, for example \&#39;en.wikipedia.org\&#39;, \&#39;www.mediawiki.org\&#39; or \&#39;commons.wikimedia.org\&#39;. 
         * @param {'all-access' | 'desktop' | 'mobile-app' | 'mobile-web'} access If you want to filter by access method, use one of desktop, mobile-app or mobile-web. If you are interested in pageviews regardless of access method, use all-access. 
         * @param {string} year The year of the date for which to retrieve top articles, in YYYY format.
         * @param {string} month The month of the date for which to retrieve top articles, in MM format. If you want to get the top articles of a whole month, the day parameter should be all-days. 
         * @param {string} day The day of the date for which to retrieve top articles, in DD format.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMostViewedArticlesByProjectAndTimespan: async (project: string, access: 'all-access' | 'desktop' | 'mobile-app' | 'mobile-web', year: string, month: string, day: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'project' is not null or undefined
            assertParamExists('listMostViewedArticlesByProjectAndTimespan', 'project', project)
            // verify required parameter 'access' is not null or undefined
            assertParamExists('listMostViewedArticlesByProjectAndTimespan', 'access', access)
            // verify required parameter 'year' is not null or undefined
            assertParamExists('listMostViewedArticlesByProjectAndTimespan', 'year', year)
            // verify required parameter 'month' is not null or undefined
            assertParamExists('listMostViewedArticlesByProjectAndTimespan', 'month', month)
            // verify required parameter 'day' is not null or undefined
            assertParamExists('listMostViewedArticlesByProjectAndTimespan', 'day', day)
            const localVarPath = `/metrics/pageviews/top/{project}/{access}/{year}/{month}/{day}`
                .replace(`{${"project"}}`, encodeURIComponent(String(project !== undefined ? project : `-project-`)))
                .replace(`{${"access"}}`, encodeURIComponent(String(access !== undefined ? access : `-access-`)))
                .replace(`{${"year"}}`, encodeURIComponent(String(year !== undefined ? year : `-year-`)))
                .replace(`{${"month"}}`, encodeURIComponent(String(month !== undefined ? month : `-month-`)))
                .replace(`{${"day"}}`, encodeURIComponent(String(day !== undefined ? day : `-day-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/metrics/pageviews/top/{project}/{access}/{year}/{month}/{day}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PageviewsDataApi - functional programming interface
 * @export
 */
export const PageviewsDataApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PageviewsDataApiAxiosParamCreator(configuration)
    return {
        /**
         * Given a Mediawiki article and a date range, returns a daily timeseries of its pageview counts. You can also filter by access method and/or agent type.  - Stability: [stable](https://www.mediawiki.org/wiki/API_versioning#Stable) - Rate limit: 100 req/s - License: Data accessible via this endpoint is available under the   [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/). 
         * @summary Get pageview counts for a page.
         * @param {PageviewsDataApiGetPageviewCountsByArticleDateRangeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPageviewCountsByArticleDateRange(requestParameters: PageviewsDataApiGetPageviewCountsByArticleDateRangeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPageviewCountsByArticleDateRange(requestParameters.project, requestParameters.access, requestParameters.agent, requestParameters.article, requestParameters.granularity, requestParameters.start, requestParameters.end, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Given a date range, returns a timeseries of pageview counts. You can filter by project, access method and/or agent type. You can choose between daily and hourly granularity as well.  - Stability: [stable](https://www.mediawiki.org/wiki/API_versioning#Stable) - Rate limit: 100 req/s - License: Data accessible via this endpoint is available under the   [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/). 
         * @summary Get pageview counts for a project.
         * @param {PageviewsDataApiGetPageviewCountsByProjectRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPageviewCountsByProject(requestParameters: PageviewsDataApiGetPageviewCountsByProjectRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPageviewCountsByProject(requestParameters.project, requestParameters.access, requestParameters.agent, requestParameters.granularity, requestParameters.start, requestParameters.end, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists the pageviews to this project, split by country of origin for a given month. Because of privacy reasons, pageviews are given in a bucketed format, and countries with less than 100 views do not get reported. Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental) - Rate limit: 100 req/s - License: Data accessible via this endpoint is available under the   [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/). 
         * @summary Get pageviews by country and access method.
         * @param {PageviewsDataApiListByCountryAndAccessRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listByCountryAndAccess(requestParameters: PageviewsDataApiListByCountryAndAccessRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listByCountryAndAccess(requestParameters.project, requestParameters.access, requestParameters.year, requestParameters.month, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists the 1000 most viewed articles for a given project and timespan (month or day). You can filter by access method.  - Stability: [stable](https://www.mediawiki.org/wiki/API_versioning#Stable) - Rate limit: 100 req/s - License: Data accessible via this endpoint is available under the   [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/). 
         * @summary Get the most viewed articles for a project.
         * @param {PageviewsDataApiListMostViewedArticlesByProjectAndTimespanRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listMostViewedArticlesByProjectAndTimespan(requestParameters: PageviewsDataApiListMostViewedArticlesByProjectAndTimespanRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listMostViewedArticlesByProjectAndTimespan(requestParameters.project, requestParameters.access, requestParameters.year, requestParameters.month, requestParameters.day, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PageviewsDataApi - factory interface
 * @export
 */
export const PageviewsDataApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PageviewsDataApiFp(configuration)
    return {
        /**
         * Given a Mediawiki article and a date range, returns a daily timeseries of its pageview counts. You can also filter by access method and/or agent type.  - Stability: [stable](https://www.mediawiki.org/wiki/API_versioning#Stable) - Rate limit: 100 req/s - License: Data accessible via this endpoint is available under the   [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/). 
         * @summary Get pageview counts for a page.
         * @param {PageviewsDataApiGetPageviewCountsByArticleDateRangeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPageviewCountsByArticleDateRange(requestParameters: PageviewsDataApiGetPageviewCountsByArticleDateRangeRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getPageviewCountsByArticleDateRange(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Given a date range, returns a timeseries of pageview counts. You can filter by project, access method and/or agent type. You can choose between daily and hourly granularity as well.  - Stability: [stable](https://www.mediawiki.org/wiki/API_versioning#Stable) - Rate limit: 100 req/s - License: Data accessible via this endpoint is available under the   [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/). 
         * @summary Get pageview counts for a project.
         * @param {PageviewsDataApiGetPageviewCountsByProjectRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPageviewCountsByProject(requestParameters: PageviewsDataApiGetPageviewCountsByProjectRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getPageviewCountsByProject(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists the pageviews to this project, split by country of origin for a given month. Because of privacy reasons, pageviews are given in a bucketed format, and countries with less than 100 views do not get reported. Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental) - Rate limit: 100 req/s - License: Data accessible via this endpoint is available under the   [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/). 
         * @summary Get pageviews by country and access method.
         * @param {PageviewsDataApiListByCountryAndAccessRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listByCountryAndAccess(requestParameters: PageviewsDataApiListByCountryAndAccessRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.listByCountryAndAccess(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists the 1000 most viewed articles for a given project and timespan (month or day). You can filter by access method.  - Stability: [stable](https://www.mediawiki.org/wiki/API_versioning#Stable) - Rate limit: 100 req/s - License: Data accessible via this endpoint is available under the   [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/). 
         * @summary Get the most viewed articles for a project.
         * @param {PageviewsDataApiListMostViewedArticlesByProjectAndTimespanRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMostViewedArticlesByProjectAndTimespan(requestParameters: PageviewsDataApiListMostViewedArticlesByProjectAndTimespanRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.listMostViewedArticlesByProjectAndTimespan(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getPageviewCountsByArticleDateRange operation in PageviewsDataApi.
 * @export
 * @interface PageviewsDataApiGetPageviewCountsByArticleDateRangeRequest
 */
export type PageviewsDataApiGetPageviewCountsByArticleDateRangeRequest = {
    
    /**
    * If you want to filter by project, use the domain of any Wikimedia project, for example \'en.wikipedia.org\', \'www.mediawiki.org\' or \'commons.wikimedia.org\'. 
    * @type {string}
    * @memberof PageviewsDataApiGetPageviewCountsByArticleDateRange
    */
    readonly project: string
    
    /**
    * If you want to filter by access method, use one of desktop, mobile-app or mobile-web. If you are interested in pageviews regardless of access method, use all-access. 
    * @type {'all-access' | 'desktop' | 'mobile-app' | 'mobile-web'}
    * @memberof PageviewsDataApiGetPageviewCountsByArticleDateRange
    */
    readonly access: 'all-access' | 'desktop' | 'mobile-app' | 'mobile-web'
    
    /**
    * If you want to filter by agent type, use one of user, bot or spider. If you are interested in pageviews regardless of agent type, use all-agents. 
    * @type {'all-agents' | 'user' | 'spider' | 'bot'}
    * @memberof PageviewsDataApiGetPageviewCountsByArticleDateRange
    */
    readonly agent: 'all-agents' | 'user' | 'spider' | 'bot'
    
    /**
    * \'The title of any article in the specified project. Any spaces should be replaced with underscores. It also should be URI-encoded, so that non-URI-safe characters like %, / or ? are accepted. Example: Are_You_the_One%3F\'. 
    * @type {string}
    * @memberof PageviewsDataApiGetPageviewCountsByArticleDateRange
    */
    readonly article: string
    
    /**
    * The time unit for the response data. As of today, the only supported granularity for this endpoint is daily and monthly. 
    * @type {'daily' | 'monthly'}
    * @memberof PageviewsDataApiGetPageviewCountsByArticleDateRange
    */
    readonly granularity: 'daily' | 'monthly'
    
    /**
    * The date of the first day to include, in YYYYMMDD or YYYYMMDDHH format
    * @type {string}
    * @memberof PageviewsDataApiGetPageviewCountsByArticleDateRange
    */
    readonly start: string
    
    /**
    * The date of the last day to include, in YYYYMMDD or YYYYMMDDHH format
    * @type {string}
    * @memberof PageviewsDataApiGetPageviewCountsByArticleDateRange
    */
    readonly end: string
    
}

/**
 * Request parameters for getPageviewCountsByProject operation in PageviewsDataApi.
 * @export
 * @interface PageviewsDataApiGetPageviewCountsByProjectRequest
 */
export type PageviewsDataApiGetPageviewCountsByProjectRequest = {
    
    /**
    * If you want to filter by project, use the domain of any Wikimedia project, for example \'en.wikipedia.org\', \'www.mediawiki.org\' or \'commons.wikimedia.org\'. If you are interested in all pageviews regardless of project, use all-projects. 
    * @type {string}
    * @memberof PageviewsDataApiGetPageviewCountsByProject
    */
    readonly project: string
    
    /**
    * If you want to filter by access method, use one of desktop, mobile-app or mobile-web. If you are interested in pageviews regardless of access method, use all-access. 
    * @type {'all-access' | 'desktop' | 'mobile-app' | 'mobile-web'}
    * @memberof PageviewsDataApiGetPageviewCountsByProject
    */
    readonly access: 'all-access' | 'desktop' | 'mobile-app' | 'mobile-web'
    
    /**
    * If you want to filter by agent type, use one of user or spider. If you are interested in pageviews regardless of agent type, use all-agents. 
    * @type {'all-agents' | 'user' | 'spider'}
    * @memberof PageviewsDataApiGetPageviewCountsByProject
    */
    readonly agent: 'all-agents' | 'user' | 'spider'
    
    /**
    * The time unit for the response data. As of today, the supported granularities for this endpoint are hourly, daily, and monthly. 
    * @type {'hourly' | 'daily' | 'monthly'}
    * @memberof PageviewsDataApiGetPageviewCountsByProject
    */
    readonly granularity: 'hourly' | 'daily' | 'monthly'
    
    /**
    * The timestamp of the first hour/day/month to include, in YYYYMMDDHH format
    * @type {string}
    * @memberof PageviewsDataApiGetPageviewCountsByProject
    */
    readonly start: string
    
    /**
    * The timestamp of the last hour/day/month to include, in YYYYMMDDHH format
    * @type {string}
    * @memberof PageviewsDataApiGetPageviewCountsByProject
    */
    readonly end: string
    
}

/**
 * Request parameters for listByCountryAndAccess operation in PageviewsDataApi.
 * @export
 * @interface PageviewsDataApiListByCountryAndAccessRequest
 */
export type PageviewsDataApiListByCountryAndAccessRequest = {
    
    /**
    * If you want to filter by project, use the domain of any Wikimedia project, for example \'en.wikipedia.org\', \'www.mediawiki.org\' or \'commons.wikimedia.org\'. 
    * @type {string}
    * @memberof PageviewsDataApiListByCountryAndAccess
    */
    readonly project: string
    
    /**
    * If you want to filter by access method, use one of desktop, mobile-app or mobile-web. If you are interested in pageviews regardless of access method, use all-access. 
    * @type {'all-access' | 'desktop' | 'mobile-app' | 'mobile-web'}
    * @memberof PageviewsDataApiListByCountryAndAccess
    */
    readonly access: 'all-access' | 'desktop' | 'mobile-app' | 'mobile-web'
    
    /**
    * The year of the date for which to retrieve top countries, in YYYY format.
    * @type {string}
    * @memberof PageviewsDataApiListByCountryAndAccess
    */
    readonly year: string
    
    /**
    * The month of the date for which to retrieve top countries, in MM format. 
    * @type {string}
    * @memberof PageviewsDataApiListByCountryAndAccess
    */
    readonly month: string
    
}

/**
 * Request parameters for listMostViewedArticlesByProjectAndTimespan operation in PageviewsDataApi.
 * @export
 * @interface PageviewsDataApiListMostViewedArticlesByProjectAndTimespanRequest
 */
export type PageviewsDataApiListMostViewedArticlesByProjectAndTimespanRequest = {
    
    /**
    * If you want to filter by project, use the domain of any Wikimedia project, for example \'en.wikipedia.org\', \'www.mediawiki.org\' or \'commons.wikimedia.org\'. 
    * @type {string}
    * @memberof PageviewsDataApiListMostViewedArticlesByProjectAndTimespan
    */
    readonly project: string
    
    /**
    * If you want to filter by access method, use one of desktop, mobile-app or mobile-web. If you are interested in pageviews regardless of access method, use all-access. 
    * @type {'all-access' | 'desktop' | 'mobile-app' | 'mobile-web'}
    * @memberof PageviewsDataApiListMostViewedArticlesByProjectAndTimespan
    */
    readonly access: 'all-access' | 'desktop' | 'mobile-app' | 'mobile-web'
    
    /**
    * The year of the date for which to retrieve top articles, in YYYY format.
    * @type {string}
    * @memberof PageviewsDataApiListMostViewedArticlesByProjectAndTimespan
    */
    readonly year: string
    
    /**
    * The month of the date for which to retrieve top articles, in MM format. If you want to get the top articles of a whole month, the day parameter should be all-days. 
    * @type {string}
    * @memberof PageviewsDataApiListMostViewedArticlesByProjectAndTimespan
    */
    readonly month: string
    
    /**
    * The day of the date for which to retrieve top articles, in DD format.
    * @type {string}
    * @memberof PageviewsDataApiListMostViewedArticlesByProjectAndTimespan
    */
    readonly day: string
    
}

/**
 * PageviewsDataApiGenerated - object-oriented interface
 * @export
 * @class PageviewsDataApiGenerated
 * @extends {BaseAPI}
 */
export class PageviewsDataApiGenerated extends BaseAPI {
    /**
     * Given a Mediawiki article and a date range, returns a daily timeseries of its pageview counts. You can also filter by access method and/or agent type.  - Stability: [stable](https://www.mediawiki.org/wiki/API_versioning#Stable) - Rate limit: 100 req/s - License: Data accessible via this endpoint is available under the   [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/). 
     * @summary Get pageview counts for a page.
     * @param {PageviewsDataApiGetPageviewCountsByArticleDateRangeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PageviewsDataApiGenerated
     */
    public getPageviewCountsByArticleDateRange(requestParameters: PageviewsDataApiGetPageviewCountsByArticleDateRangeRequest, options?: AxiosRequestConfig) {
        return PageviewsDataApiFp(this.configuration).getPageviewCountsByArticleDateRange(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Given a date range, returns a timeseries of pageview counts. You can filter by project, access method and/or agent type. You can choose between daily and hourly granularity as well.  - Stability: [stable](https://www.mediawiki.org/wiki/API_versioning#Stable) - Rate limit: 100 req/s - License: Data accessible via this endpoint is available under the   [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/). 
     * @summary Get pageview counts for a project.
     * @param {PageviewsDataApiGetPageviewCountsByProjectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PageviewsDataApiGenerated
     */
    public getPageviewCountsByProject(requestParameters: PageviewsDataApiGetPageviewCountsByProjectRequest, options?: AxiosRequestConfig) {
        return PageviewsDataApiFp(this.configuration).getPageviewCountsByProject(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists the pageviews to this project, split by country of origin for a given month. Because of privacy reasons, pageviews are given in a bucketed format, and countries with less than 100 views do not get reported. Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental) - Rate limit: 100 req/s - License: Data accessible via this endpoint is available under the   [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/). 
     * @summary Get pageviews by country and access method.
     * @param {PageviewsDataApiListByCountryAndAccessRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PageviewsDataApiGenerated
     */
    public listByCountryAndAccess(requestParameters: PageviewsDataApiListByCountryAndAccessRequest, options?: AxiosRequestConfig) {
        return PageviewsDataApiFp(this.configuration).listByCountryAndAccess(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists the 1000 most viewed articles for a given project and timespan (month or day). You can filter by access method.  - Stability: [stable](https://www.mediawiki.org/wiki/API_versioning#Stable) - Rate limit: 100 req/s - License: Data accessible via this endpoint is available under the   [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/). 
     * @summary Get the most viewed articles for a project.
     * @param {PageviewsDataApiListMostViewedArticlesByProjectAndTimespanRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PageviewsDataApiGenerated
     */
    public listMostViewedArticlesByProjectAndTimespan(requestParameters: PageviewsDataApiListMostViewedArticlesByProjectAndTimespanRequest, options?: AxiosRequestConfig) {
        return PageviewsDataApiFp(this.configuration).listMostViewedArticlesByProjectAndTimespan(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
