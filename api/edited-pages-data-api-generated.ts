/* tslint:disable */
/* eslint-disable */
/*
Wikimedia

This API provides cacheable and straightforward access to Wikimedia content and data, in machine-readable formats.
### Global Rules
- Limit your clients to no more than 200 requests/s to this API.
  Each API endpoint's documentation may detail more specific usage limits.
- Set a unique `User-Agent` or `Api-User-Agent` header that
  allows us to contact you quickly. Email addresses or URLs
  of contact pages work well.

By using this API, you agree to Wikimedia's  [Terms of Use](https://wikimediafoundation.org/wiki/Terms_of_Use) and [Privacy Policy](https://wikimediafoundation.org/wiki/Privacy_policy). Unless otherwise specified in the endpoint documentation below, content accessed via this API is licensed under the [CC-BY-SA 3.0](https://creativecommons.org/licenses/by-sa/3.0/)  and [GFDL](https://www.gnu.org/copyleft/fdl.html) licenses, and you irrevocably agree to release modifications or additions made through this API under these licenses.  See https://www.mediawiki.org/wiki/REST_API for background and details.
### Endpoint documentation
Please consult each endpoint's documentation for details on:
- Licensing information for the specific type of content
  and data served via the endpoint.
- Stability markers to inform you about development status and
  change policy, according to
  [our API version policy](https://www.mediawiki.org/wiki/API_versioning).
- Endpoint specific usage limits.


The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { EditedPages } from '../models';
// @ts-ignore
import { NewPages } from '../models';
// @ts-ignore
import { Problem } from '../models';
// @ts-ignore
import { TopEditedPagesByAbsBytesDiff } from '../models';
// @ts-ignore
import { TopEditedPagesByEdits } from '../models';
// @ts-ignore
import { TopEditedPagesByNetBytesDiff } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * EditedPagesDataApi - axios parameter creator
 * @export
 */
export const EditedPagesDataApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Given a Mediawiki project and a date range, returns a timeseries of its edited-pages counts. You can filter by editor-type (all-editor-types, anonymous, group-bot, name-bot, user), page-type (all-page-types, content or non-content) or activity-level (1..4-edits, 5..24-edits, 25..99-edits, 100..-edits). You can choose between daily and monthly granularity as well.  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental) - Rate limit: 25 req/s - License: Data accessible via this endpoint is available under the   [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/). 
         * @summary Get edited-pages counts for a project.
         * @param {string} project The name of any Wikimedia project formatted like {language code}.{project name}, for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped off.  For projects like commons without language codes, use commons.wikimedia. For projects like www.mediawiki.org, you can use that full string, or just use mediawiki or mediawiki.org. 
         * @param {'all-editor-types' | 'anonymous' | 'group-bot' | 'name-bot' | 'user'} editorType If you want to filter by editor-type, use one of anonymous, group-bot (registered accounts belonging to the bot group), name-bot (registered accounts not belonging to the bot group but having bot-like names) or user (registered account not in bot group nor having bot-like name). If you are interested in edits regardless of their editor-type, use all-editor-types. 
         * @param {'all-page-types' | 'content' | 'non-content'} pageType If you want to filter by page-type, use one of content (edited-pages in content namespaces) or non-content (edited-pages in non-content namespaces). If you are interested in edited-pages regardless of their page-type, use all-page-types. 
         * @param {'all-activity-levels' | '1..4-edits' | '5..24-edits' | '25..99-edits' | '100..-edits'} activityLevel If you want to filter by activity-level, use one of 1..4-edits, 5..24-edits, 25..99-edits or 100..-edits. If you are interested in edited-pages regardless of their activity level, use all-activity-levels. 
         * @param {'daily' | 'monthly'} granularity The time unit for the response data. As of today, supported values are daily and monthly. 
         * @param {string} start The date of the first day to include, in YYYYMMDD format
         * @param {string} end The date of the last day to include, in YYYYMMDD format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAggregateByProjectAndDateRange: async (project: string, editorType: 'all-editor-types' | 'anonymous' | 'group-bot' | 'name-bot' | 'user', pageType: 'all-page-types' | 'content' | 'non-content', activityLevel: 'all-activity-levels' | '1..4-edits' | '5..24-edits' | '25..99-edits' | '100..-edits', granularity: 'daily' | 'monthly', start: string, end: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'project' is not null or undefined
            assertParamExists('getAggregateByProjectAndDateRange', 'project', project)
            // verify required parameter 'editorType' is not null or undefined
            assertParamExists('getAggregateByProjectAndDateRange', 'editorType', editorType)
            // verify required parameter 'pageType' is not null or undefined
            assertParamExists('getAggregateByProjectAndDateRange', 'pageType', pageType)
            // verify required parameter 'activityLevel' is not null or undefined
            assertParamExists('getAggregateByProjectAndDateRange', 'activityLevel', activityLevel)
            // verify required parameter 'granularity' is not null or undefined
            assertParamExists('getAggregateByProjectAndDateRange', 'granularity', granularity)
            // verify required parameter 'start' is not null or undefined
            assertParamExists('getAggregateByProjectAndDateRange', 'start', start)
            // verify required parameter 'end' is not null or undefined
            assertParamExists('getAggregateByProjectAndDateRange', 'end', end)
            const localVarPath = `/metrics/edited-pages/aggregate/{project}/{editor-type}/{page-type}/{activity-level}/{granularity}/{start}/{end}`
                .replace(`{${"project"}}`, encodeURIComponent(String(project !== undefined ? project : `-project-`)))
                .replace(`{${"editor-type"}}`, encodeURIComponent(String(editorType !== undefined ? editorType : `-editor-type-`)))
                .replace(`{${"page-type"}}`, encodeURIComponent(String(pageType !== undefined ? pageType : `-page-type-`)))
                .replace(`{${"activity-level"}}`, encodeURIComponent(String(activityLevel !== undefined ? activityLevel : `-activity-level-`)))
                .replace(`{${"granularity"}}`, encodeURIComponent(String(granularity !== undefined ? granularity : `-granularity-`)))
                .replace(`{${"start"}}`, encodeURIComponent(String(start !== undefined ? start : `-start-`)))
                .replace(`{${"end"}}`, encodeURIComponent(String(end !== undefined ? end : `-end-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/metrics/edited-pages/aggregate/{project}/{editor-type}/{page-type}/{activity-level}/{granularity}/{start}/{end}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Given a Mediawiki project and a date range, returns a timeseries of its new pages counts. You can filter by editor type (all-editor-types, anonymous, group-bot, name-bot, user) or page-type (all-page-types, content or non-content). You can choose between daily and monthly granularity as well.  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental) - Rate limit: 25 req/s - License: Data accessible via this endpoint is available under the   [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/). 
         * @summary Get new pages counts for a project.
         * @param {string} project The name of any Wikimedia project formatted like {language code}.{project name}, for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped off.  For projects like commons without language codes, use commons.wikimedia. For projects like www.mediawiki.org, you can use that full string, or just use mediawiki or mediawiki.org. If you\&#39;re interested in the aggregation of all projects, use all-projects. 
         * @param {'all-editor-types' | 'anonymous' | 'group-bot' | 'name-bot' | 'user'} editorType If you want to filter by editor-type, use one of anonymous, group-bot (registered accounts belonging to the bot group), name-bot (registered accounts not belonging to the bot group but having bot-like names) or user (registered account not in bot group nor having bot-like name). If you are interested in edits regardless of their editor-type, use all-editor-types. 
         * @param {'all-page-types' | 'content' | 'non-content'} pageType If you want to filter by page-type, use one of content (new pages in content namespaces) or non-content (new pages in non-content namespaces). If you are interested in new-articles regardless of their page-type, use all-page-types. 
         * @param {'daily' | 'monthly'} granularity The time unit for the response data. As of today, supported values are daily and monthly. 
         * @param {string} start The date of the first day to include, in YYYYMMDD format
         * @param {string} end The date of the last day to include, in YYYYMMDD format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNewPagesCountsForProject: async (project: string, editorType: 'all-editor-types' | 'anonymous' | 'group-bot' | 'name-bot' | 'user', pageType: 'all-page-types' | 'content' | 'non-content', granularity: 'daily' | 'monthly', start: string, end: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'project' is not null or undefined
            assertParamExists('getNewPagesCountsForProject', 'project', project)
            // verify required parameter 'editorType' is not null or undefined
            assertParamExists('getNewPagesCountsForProject', 'editorType', editorType)
            // verify required parameter 'pageType' is not null or undefined
            assertParamExists('getNewPagesCountsForProject', 'pageType', pageType)
            // verify required parameter 'granularity' is not null or undefined
            assertParamExists('getNewPagesCountsForProject', 'granularity', granularity)
            // verify required parameter 'start' is not null or undefined
            assertParamExists('getNewPagesCountsForProject', 'start', start)
            // verify required parameter 'end' is not null or undefined
            assertParamExists('getNewPagesCountsForProject', 'end', end)
            const localVarPath = `/metrics/edited-pages/new/{project}/{editor-type}/{page-type}/{granularity}/{start}/{end}`
                .replace(`{${"project"}}`, encodeURIComponent(String(project !== undefined ? project : `-project-`)))
                .replace(`{${"editor-type"}}`, encodeURIComponent(String(editorType !== undefined ? editorType : `-editor-type-`)))
                .replace(`{${"page-type"}}`, encodeURIComponent(String(pageType !== undefined ? pageType : `-page-type-`)))
                .replace(`{${"granularity"}}`, encodeURIComponent(String(granularity !== undefined ? granularity : `-granularity-`)))
                .replace(`{${"start"}}`, encodeURIComponent(String(start !== undefined ? start : `-start-`)))
                .replace(`{${"end"}}`, encodeURIComponent(String(end !== undefined ? end : `-end-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/metrics/edited-pages/new/{project}/{editor-type}/{page-type}/{granularity}/{start}/{end}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Given a Mediawiki project and a date (day or month), returns a timeseries of the top 100 edited-pages by absolute bytes-difference. You can filter by editor-type (all-editor-types, anonymous, group-bot, name-bot, user) or page-type (all-page-types, content or non-content).  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental) - Rate limit: 25 req/s - License: Data accessible via this endpoint is available under the   [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/). 
         * @summary Get top 100 edited-pages by absolute bytes-difference.
         * @param {string} project The name of any Wikimedia project formatted like {language code}.{project name}, for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped off. For projects like commons without language codes, use commons.wikimedia. For projects like www.mediawiki.org, you can use that full string, or just use mediawiki or mediawiki.org. 
         * @param {'all-editor-types' | 'anonymous' | 'group-bot' | 'name-bot' | 'user'} editorType If you want to filter by editor-type, use one of anonymous, group-bot (registered accounts belonging to the bot group), name-bot (registered accounts not belonging to the bot group but having bot-like names) or user (registered account not in bot group nor having bot-like name). If you are interested in edits regardless of their editor-type, use all-editor-types. 
         * @param {'all-page-types' | 'content' | 'non-content'} pageType If you want to filter by page-type, use one of content (edits on pages in content namespaces) or non-content (edits on pages in non-content namespaces). If you are interested in edits regardless of their page-type, use all-page-types. 
         * @param {string} year The year of the date for which to retrieve top edited-pages, in YYYY format.
         * @param {string} month The month of the date for which to retrieve top edited-pages, in MM format. If you want to get the top edited-pages of a whole month, the day parameter should be all-days.
         * @param {string} day The day of the date for which to retrieve top edited-pages, in DD format, or all-days for a monthly value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTopByAbsoluteBytesDifference: async (project: string, editorType: 'all-editor-types' | 'anonymous' | 'group-bot' | 'name-bot' | 'user', pageType: 'all-page-types' | 'content' | 'non-content', year: string, month: string, day: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'project' is not null or undefined
            assertParamExists('getTopByAbsoluteBytesDifference', 'project', project)
            // verify required parameter 'editorType' is not null or undefined
            assertParamExists('getTopByAbsoluteBytesDifference', 'editorType', editorType)
            // verify required parameter 'pageType' is not null or undefined
            assertParamExists('getTopByAbsoluteBytesDifference', 'pageType', pageType)
            // verify required parameter 'year' is not null or undefined
            assertParamExists('getTopByAbsoluteBytesDifference', 'year', year)
            // verify required parameter 'month' is not null or undefined
            assertParamExists('getTopByAbsoluteBytesDifference', 'month', month)
            // verify required parameter 'day' is not null or undefined
            assertParamExists('getTopByAbsoluteBytesDifference', 'day', day)
            const localVarPath = `/metrics/edited-pages/top-by-absolute-bytes-difference/{project}/{editor-type}/{page-type}/{year}/{month}/{day}`
                .replace(`{${"project"}}`, encodeURIComponent(String(project !== undefined ? project : `-project-`)))
                .replace(`{${"editor-type"}}`, encodeURIComponent(String(editorType !== undefined ? editorType : `-editor-type-`)))
                .replace(`{${"page-type"}}`, encodeURIComponent(String(pageType !== undefined ? pageType : `-page-type-`)))
                .replace(`{${"year"}}`, encodeURIComponent(String(year !== undefined ? year : `-year-`)))
                .replace(`{${"month"}}`, encodeURIComponent(String(month !== undefined ? month : `-month-`)))
                .replace(`{${"day"}}`, encodeURIComponent(String(day !== undefined ? day : `-day-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/metrics/edited-pages/top-by-absolute-bytes-difference/{project}/{editor-type}/{page-type}/{year}/{month}/{day}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Given a Mediawiki project and a date (day or month), returns a timeseries of the top 100 edited-pages by edits count. You can filter by editor-type (all-editor-types, anonymous, group-bot, name-bot, user) or page-type (all-page-types, content or non-content).  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental) - Rate limit: 25 req/s - License: Data accessible via this endpoint is available under the   [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/). 
         * @summary Get top 100 edited-pages by edits count.
         * @param {string} project The name of any Wikimedia project formatted like {language code}.{project name}, for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped off. For projects like commons without language codes, use commons.wikimedia. For projects like www.mediawiki.org, you can use that full string, or just use mediawiki or mediawiki.org. 
         * @param {'all-editor-types' | 'anonymous' | 'group-bot' | 'name-bot' | 'user'} editorType If you want to filter by editor-type, use one of anonymous, group-bot (registered accounts belonging to the bot group), name-bot (registered accounts not belonging to the bot group but having bot-like names) or user (registered account not in bot group nor having bot-like name). If you are interested in edits regardless of their editor-type, use all-editor-types. 
         * @param {'all-page-types' | 'content' | 'non-content'} pageType If you want to filter by page-type, use one of content (edits on pages in content namespaces) or non-content (edits on pages in non-content namespaces). If you are interested in edits regardless of their page-type, use all-page-types. 
         * @param {string} year The year of the date for which to retrieve top edited-pages, in YYYY format.
         * @param {string} month The month of the date for which to retrieve top edited-pages, in MM format. If you want to get the top edited-pages of a whole month, the day parameter should be all-days.
         * @param {string} day The day of the date for which to retrieve top edited-pages, in DD format, or all-days for a monthly value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTopByEditsCount: async (project: string, editorType: 'all-editor-types' | 'anonymous' | 'group-bot' | 'name-bot' | 'user', pageType: 'all-page-types' | 'content' | 'non-content', year: string, month: string, day: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'project' is not null or undefined
            assertParamExists('getTopByEditsCount', 'project', project)
            // verify required parameter 'editorType' is not null or undefined
            assertParamExists('getTopByEditsCount', 'editorType', editorType)
            // verify required parameter 'pageType' is not null or undefined
            assertParamExists('getTopByEditsCount', 'pageType', pageType)
            // verify required parameter 'year' is not null or undefined
            assertParamExists('getTopByEditsCount', 'year', year)
            // verify required parameter 'month' is not null or undefined
            assertParamExists('getTopByEditsCount', 'month', month)
            // verify required parameter 'day' is not null or undefined
            assertParamExists('getTopByEditsCount', 'day', day)
            const localVarPath = `/metrics/edited-pages/top-by-edits/{project}/{editor-type}/{page-type}/{year}/{month}/{day}`
                .replace(`{${"project"}}`, encodeURIComponent(String(project !== undefined ? project : `-project-`)))
                .replace(`{${"editor-type"}}`, encodeURIComponent(String(editorType !== undefined ? editorType : `-editor-type-`)))
                .replace(`{${"page-type"}}`, encodeURIComponent(String(pageType !== undefined ? pageType : `-page-type-`)))
                .replace(`{${"year"}}`, encodeURIComponent(String(year !== undefined ? year : `-year-`)))
                .replace(`{${"month"}}`, encodeURIComponent(String(month !== undefined ? month : `-month-`)))
                .replace(`{${"day"}}`, encodeURIComponent(String(day !== undefined ? day : `-day-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/metrics/edited-pages/top-by-edits/{project}/{editor-type}/{page-type}/{year}/{month}/{day}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Given a Mediawiki project and a date (day or month), returns a timeseries of the top 100 edited-pages by net bytes-difference. You can filter by editor-type (all-editor-types, anonymous, group-bot, name-bot, user) or page-type (all-page-types, content or non-content).  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental) - Rate limit: 25 req/s - License: Data accessible via this endpoint is available under the   [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/). 
         * @summary Get top 100 edited-pages by net bytes-difference.
         * @param {string} project The name of any Wikimedia project formatted like {language code}.{project name}, for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped off. For projects like commons without language codes, use commons.wikimedia. For projects like www.mediawiki.org, you can use that full string, or just use mediawiki or mediawiki.org. 
         * @param {'all-editor-types' | 'anonymous' | 'group-bot' | 'name-bot' | 'user'} editorType If you want to filter by editor-type, use one of anonymous, group-bot (registered accounts belonging to the bot group), name-bot (registered accounts not belonging to the bot group but having bot-like names) or user (registered account not in bot group nor having bot-like name). If you are interested in edits regardless of their editor-type, use all-editor-types. 
         * @param {'all-page-types' | 'content' | 'non-content'} pageType If you want to filter by page-type, use one of content (edits on pages in content namespaces) or non-content (edits on pages in non-content namespaces). If you are interested in edits regardless of their page-type, use all-page-types. 
         * @param {string} year The year of the date for which to retrieve top edited-pages, in YYYY format.
         * @param {string} month The month of the date for which to retrieve top edited-pages, in MM format. If you want to get the top edited-pages of a whole month, the day parameter should be all-days.
         * @param {string} day The day of the date for which to retrieve top edited-pages, in DD format, or all-days for a monthly value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTopByNetBytesDifference: async (project: string, editorType: 'all-editor-types' | 'anonymous' | 'group-bot' | 'name-bot' | 'user', pageType: 'all-page-types' | 'content' | 'non-content', year: string, month: string, day: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'project' is not null or undefined
            assertParamExists('getTopByNetBytesDifference', 'project', project)
            // verify required parameter 'editorType' is not null or undefined
            assertParamExists('getTopByNetBytesDifference', 'editorType', editorType)
            // verify required parameter 'pageType' is not null or undefined
            assertParamExists('getTopByNetBytesDifference', 'pageType', pageType)
            // verify required parameter 'year' is not null or undefined
            assertParamExists('getTopByNetBytesDifference', 'year', year)
            // verify required parameter 'month' is not null or undefined
            assertParamExists('getTopByNetBytesDifference', 'month', month)
            // verify required parameter 'day' is not null or undefined
            assertParamExists('getTopByNetBytesDifference', 'day', day)
            const localVarPath = `/metrics/edited-pages/top-by-net-bytes-difference/{project}/{editor-type}/{page-type}/{year}/{month}/{day}`
                .replace(`{${"project"}}`, encodeURIComponent(String(project !== undefined ? project : `-project-`)))
                .replace(`{${"editor-type"}}`, encodeURIComponent(String(editorType !== undefined ? editorType : `-editor-type-`)))
                .replace(`{${"page-type"}}`, encodeURIComponent(String(pageType !== undefined ? pageType : `-page-type-`)))
                .replace(`{${"year"}}`, encodeURIComponent(String(year !== undefined ? year : `-year-`)))
                .replace(`{${"month"}}`, encodeURIComponent(String(month !== undefined ? month : `-month-`)))
                .replace(`{${"day"}}`, encodeURIComponent(String(day !== undefined ? day : `-day-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/metrics/edited-pages/top-by-net-bytes-difference/{project}/{editor-type}/{page-type}/{year}/{month}/{day}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EditedPagesDataApi - functional programming interface
 * @export
 */
export const EditedPagesDataApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EditedPagesDataApiAxiosParamCreator(configuration)
    return {
        /**
         * Given a Mediawiki project and a date range, returns a timeseries of its edited-pages counts. You can filter by editor-type (all-editor-types, anonymous, group-bot, name-bot, user), page-type (all-page-types, content or non-content) or activity-level (1..4-edits, 5..24-edits, 25..99-edits, 100..-edits). You can choose between daily and monthly granularity as well.  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental) - Rate limit: 25 req/s - License: Data accessible via this endpoint is available under the   [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/). 
         * @summary Get edited-pages counts for a project.
         * @param {EditedPagesDataApiGetAggregateByProjectAndDateRangeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAggregateByProjectAndDateRange(requestParameters: EditedPagesDataApiGetAggregateByProjectAndDateRangeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAggregateByProjectAndDateRange(requestParameters.project, requestParameters.editorType, requestParameters.pageType, requestParameters.activityLevel, requestParameters.granularity, requestParameters.start, requestParameters.end, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Given a Mediawiki project and a date range, returns a timeseries of its new pages counts. You can filter by editor type (all-editor-types, anonymous, group-bot, name-bot, user) or page-type (all-page-types, content or non-content). You can choose between daily and monthly granularity as well.  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental) - Rate limit: 25 req/s - License: Data accessible via this endpoint is available under the   [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/). 
         * @summary Get new pages counts for a project.
         * @param {EditedPagesDataApiGetNewPagesCountsForProjectRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNewPagesCountsForProject(requestParameters: EditedPagesDataApiGetNewPagesCountsForProjectRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNewPagesCountsForProject(requestParameters.project, requestParameters.editorType, requestParameters.pageType, requestParameters.granularity, requestParameters.start, requestParameters.end, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Given a Mediawiki project and a date (day or month), returns a timeseries of the top 100 edited-pages by absolute bytes-difference. You can filter by editor-type (all-editor-types, anonymous, group-bot, name-bot, user) or page-type (all-page-types, content or non-content).  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental) - Rate limit: 25 req/s - License: Data accessible via this endpoint is available under the   [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/). 
         * @summary Get top 100 edited-pages by absolute bytes-difference.
         * @param {EditedPagesDataApiGetTopByAbsoluteBytesDifferenceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTopByAbsoluteBytesDifference(requestParameters: EditedPagesDataApiGetTopByAbsoluteBytesDifferenceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTopByAbsoluteBytesDifference(requestParameters.project, requestParameters.editorType, requestParameters.pageType, requestParameters.year, requestParameters.month, requestParameters.day, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Given a Mediawiki project and a date (day or month), returns a timeseries of the top 100 edited-pages by edits count. You can filter by editor-type (all-editor-types, anonymous, group-bot, name-bot, user) or page-type (all-page-types, content or non-content).  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental) - Rate limit: 25 req/s - License: Data accessible via this endpoint is available under the   [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/). 
         * @summary Get top 100 edited-pages by edits count.
         * @param {EditedPagesDataApiGetTopByEditsCountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTopByEditsCount(requestParameters: EditedPagesDataApiGetTopByEditsCountRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTopByEditsCount(requestParameters.project, requestParameters.editorType, requestParameters.pageType, requestParameters.year, requestParameters.month, requestParameters.day, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Given a Mediawiki project and a date (day or month), returns a timeseries of the top 100 edited-pages by net bytes-difference. You can filter by editor-type (all-editor-types, anonymous, group-bot, name-bot, user) or page-type (all-page-types, content or non-content).  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental) - Rate limit: 25 req/s - License: Data accessible via this endpoint is available under the   [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/). 
         * @summary Get top 100 edited-pages by net bytes-difference.
         * @param {EditedPagesDataApiGetTopByNetBytesDifferenceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTopByNetBytesDifference(requestParameters: EditedPagesDataApiGetTopByNetBytesDifferenceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTopByNetBytesDifference(requestParameters.project, requestParameters.editorType, requestParameters.pageType, requestParameters.year, requestParameters.month, requestParameters.day, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EditedPagesDataApi - factory interface
 * @export
 */
export const EditedPagesDataApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EditedPagesDataApiFp(configuration)
    return {
        /**
         * Given a Mediawiki project and a date range, returns a timeseries of its edited-pages counts. You can filter by editor-type (all-editor-types, anonymous, group-bot, name-bot, user), page-type (all-page-types, content or non-content) or activity-level (1..4-edits, 5..24-edits, 25..99-edits, 100..-edits). You can choose between daily and monthly granularity as well.  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental) - Rate limit: 25 req/s - License: Data accessible via this endpoint is available under the   [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/). 
         * @summary Get edited-pages counts for a project.
         * @param {EditedPagesDataApiGetAggregateByProjectAndDateRangeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAggregateByProjectAndDateRange(requestParameters: EditedPagesDataApiGetAggregateByProjectAndDateRangeRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getAggregateByProjectAndDateRange(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Given a Mediawiki project and a date range, returns a timeseries of its new pages counts. You can filter by editor type (all-editor-types, anonymous, group-bot, name-bot, user) or page-type (all-page-types, content or non-content). You can choose between daily and monthly granularity as well.  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental) - Rate limit: 25 req/s - License: Data accessible via this endpoint is available under the   [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/). 
         * @summary Get new pages counts for a project.
         * @param {EditedPagesDataApiGetNewPagesCountsForProjectRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNewPagesCountsForProject(requestParameters: EditedPagesDataApiGetNewPagesCountsForProjectRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getNewPagesCountsForProject(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Given a Mediawiki project and a date (day or month), returns a timeseries of the top 100 edited-pages by absolute bytes-difference. You can filter by editor-type (all-editor-types, anonymous, group-bot, name-bot, user) or page-type (all-page-types, content or non-content).  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental) - Rate limit: 25 req/s - License: Data accessible via this endpoint is available under the   [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/). 
         * @summary Get top 100 edited-pages by absolute bytes-difference.
         * @param {EditedPagesDataApiGetTopByAbsoluteBytesDifferenceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTopByAbsoluteBytesDifference(requestParameters: EditedPagesDataApiGetTopByAbsoluteBytesDifferenceRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getTopByAbsoluteBytesDifference(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Given a Mediawiki project and a date (day or month), returns a timeseries of the top 100 edited-pages by edits count. You can filter by editor-type (all-editor-types, anonymous, group-bot, name-bot, user) or page-type (all-page-types, content or non-content).  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental) - Rate limit: 25 req/s - License: Data accessible via this endpoint is available under the   [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/). 
         * @summary Get top 100 edited-pages by edits count.
         * @param {EditedPagesDataApiGetTopByEditsCountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTopByEditsCount(requestParameters: EditedPagesDataApiGetTopByEditsCountRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getTopByEditsCount(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Given a Mediawiki project and a date (day or month), returns a timeseries of the top 100 edited-pages by net bytes-difference. You can filter by editor-type (all-editor-types, anonymous, group-bot, name-bot, user) or page-type (all-page-types, content or non-content).  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental) - Rate limit: 25 req/s - License: Data accessible via this endpoint is available under the   [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/). 
         * @summary Get top 100 edited-pages by net bytes-difference.
         * @param {EditedPagesDataApiGetTopByNetBytesDifferenceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTopByNetBytesDifference(requestParameters: EditedPagesDataApiGetTopByNetBytesDifferenceRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getTopByNetBytesDifference(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getAggregateByProjectAndDateRange operation in EditedPagesDataApi.
 * @export
 * @interface EditedPagesDataApiGetAggregateByProjectAndDateRangeRequest
 */
export type EditedPagesDataApiGetAggregateByProjectAndDateRangeRequest = {
    
    /**
    * The name of any Wikimedia project formatted like {language code}.{project name}, for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped off.  For projects like commons without language codes, use commons.wikimedia. For projects like www.mediawiki.org, you can use that full string, or just use mediawiki or mediawiki.org. 
    * @type {string}
    * @memberof EditedPagesDataApiGetAggregateByProjectAndDateRange
    */
    readonly project: string
    
    /**
    * If you want to filter by editor-type, use one of anonymous, group-bot (registered accounts belonging to the bot group), name-bot (registered accounts not belonging to the bot group but having bot-like names) or user (registered account not in bot group nor having bot-like name). If you are interested in edits regardless of their editor-type, use all-editor-types. 
    * @type {'all-editor-types' | 'anonymous' | 'group-bot' | 'name-bot' | 'user'}
    * @memberof EditedPagesDataApiGetAggregateByProjectAndDateRange
    */
    readonly editorType: 'all-editor-types' | 'anonymous' | 'group-bot' | 'name-bot' | 'user'
    
    /**
    * If you want to filter by page-type, use one of content (edited-pages in content namespaces) or non-content (edited-pages in non-content namespaces). If you are interested in edited-pages regardless of their page-type, use all-page-types. 
    * @type {'all-page-types' | 'content' | 'non-content'}
    * @memberof EditedPagesDataApiGetAggregateByProjectAndDateRange
    */
    readonly pageType: 'all-page-types' | 'content' | 'non-content'
    
    /**
    * If you want to filter by activity-level, use one of 1..4-edits, 5..24-edits, 25..99-edits or 100..-edits. If you are interested in edited-pages regardless of their activity level, use all-activity-levels. 
    * @type {'all-activity-levels' | '1..4-edits' | '5..24-edits' | '25..99-edits' | '100..-edits'}
    * @memberof EditedPagesDataApiGetAggregateByProjectAndDateRange
    */
    readonly activityLevel: 'all-activity-levels' | '1..4-edits' | '5..24-edits' | '25..99-edits' | '100..-edits'
    
    /**
    * The time unit for the response data. As of today, supported values are daily and monthly. 
    * @type {'daily' | 'monthly'}
    * @memberof EditedPagesDataApiGetAggregateByProjectAndDateRange
    */
    readonly granularity: 'daily' | 'monthly'
    
    /**
    * The date of the first day to include, in YYYYMMDD format
    * @type {string}
    * @memberof EditedPagesDataApiGetAggregateByProjectAndDateRange
    */
    readonly start: string
    
    /**
    * The date of the last day to include, in YYYYMMDD format
    * @type {string}
    * @memberof EditedPagesDataApiGetAggregateByProjectAndDateRange
    */
    readonly end: string
    
}

/**
 * Request parameters for getNewPagesCountsForProject operation in EditedPagesDataApi.
 * @export
 * @interface EditedPagesDataApiGetNewPagesCountsForProjectRequest
 */
export type EditedPagesDataApiGetNewPagesCountsForProjectRequest = {
    
    /**
    * The name of any Wikimedia project formatted like {language code}.{project name}, for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped off.  For projects like commons without language codes, use commons.wikimedia. For projects like www.mediawiki.org, you can use that full string, or just use mediawiki or mediawiki.org. If you\'re interested in the aggregation of all projects, use all-projects. 
    * @type {string}
    * @memberof EditedPagesDataApiGetNewPagesCountsForProject
    */
    readonly project: string
    
    /**
    * If you want to filter by editor-type, use one of anonymous, group-bot (registered accounts belonging to the bot group), name-bot (registered accounts not belonging to the bot group but having bot-like names) or user (registered account not in bot group nor having bot-like name). If you are interested in edits regardless of their editor-type, use all-editor-types. 
    * @type {'all-editor-types' | 'anonymous' | 'group-bot' | 'name-bot' | 'user'}
    * @memberof EditedPagesDataApiGetNewPagesCountsForProject
    */
    readonly editorType: 'all-editor-types' | 'anonymous' | 'group-bot' | 'name-bot' | 'user'
    
    /**
    * If you want to filter by page-type, use one of content (new pages in content namespaces) or non-content (new pages in non-content namespaces). If you are interested in new-articles regardless of their page-type, use all-page-types. 
    * @type {'all-page-types' | 'content' | 'non-content'}
    * @memberof EditedPagesDataApiGetNewPagesCountsForProject
    */
    readonly pageType: 'all-page-types' | 'content' | 'non-content'
    
    /**
    * The time unit for the response data. As of today, supported values are daily and monthly. 
    * @type {'daily' | 'monthly'}
    * @memberof EditedPagesDataApiGetNewPagesCountsForProject
    */
    readonly granularity: 'daily' | 'monthly'
    
    /**
    * The date of the first day to include, in YYYYMMDD format
    * @type {string}
    * @memberof EditedPagesDataApiGetNewPagesCountsForProject
    */
    readonly start: string
    
    /**
    * The date of the last day to include, in YYYYMMDD format
    * @type {string}
    * @memberof EditedPagesDataApiGetNewPagesCountsForProject
    */
    readonly end: string
    
}

/**
 * Request parameters for getTopByAbsoluteBytesDifference operation in EditedPagesDataApi.
 * @export
 * @interface EditedPagesDataApiGetTopByAbsoluteBytesDifferenceRequest
 */
export type EditedPagesDataApiGetTopByAbsoluteBytesDifferenceRequest = {
    
    /**
    * The name of any Wikimedia project formatted like {language code}.{project name}, for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped off. For projects like commons without language codes, use commons.wikimedia. For projects like www.mediawiki.org, you can use that full string, or just use mediawiki or mediawiki.org. 
    * @type {string}
    * @memberof EditedPagesDataApiGetTopByAbsoluteBytesDifference
    */
    readonly project: string
    
    /**
    * If you want to filter by editor-type, use one of anonymous, group-bot (registered accounts belonging to the bot group), name-bot (registered accounts not belonging to the bot group but having bot-like names) or user (registered account not in bot group nor having bot-like name). If you are interested in edits regardless of their editor-type, use all-editor-types. 
    * @type {'all-editor-types' | 'anonymous' | 'group-bot' | 'name-bot' | 'user'}
    * @memberof EditedPagesDataApiGetTopByAbsoluteBytesDifference
    */
    readonly editorType: 'all-editor-types' | 'anonymous' | 'group-bot' | 'name-bot' | 'user'
    
    /**
    * If you want to filter by page-type, use one of content (edits on pages in content namespaces) or non-content (edits on pages in non-content namespaces). If you are interested in edits regardless of their page-type, use all-page-types. 
    * @type {'all-page-types' | 'content' | 'non-content'}
    * @memberof EditedPagesDataApiGetTopByAbsoluteBytesDifference
    */
    readonly pageType: 'all-page-types' | 'content' | 'non-content'
    
    /**
    * The year of the date for which to retrieve top edited-pages, in YYYY format.
    * @type {string}
    * @memberof EditedPagesDataApiGetTopByAbsoluteBytesDifference
    */
    readonly year: string
    
    /**
    * The month of the date for which to retrieve top edited-pages, in MM format. If you want to get the top edited-pages of a whole month, the day parameter should be all-days.
    * @type {string}
    * @memberof EditedPagesDataApiGetTopByAbsoluteBytesDifference
    */
    readonly month: string
    
    /**
    * The day of the date for which to retrieve top edited-pages, in DD format, or all-days for a monthly value.
    * @type {string}
    * @memberof EditedPagesDataApiGetTopByAbsoluteBytesDifference
    */
    readonly day: string
    
}

/**
 * Request parameters for getTopByEditsCount operation in EditedPagesDataApi.
 * @export
 * @interface EditedPagesDataApiGetTopByEditsCountRequest
 */
export type EditedPagesDataApiGetTopByEditsCountRequest = {
    
    /**
    * The name of any Wikimedia project formatted like {language code}.{project name}, for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped off. For projects like commons without language codes, use commons.wikimedia. For projects like www.mediawiki.org, you can use that full string, or just use mediawiki or mediawiki.org. 
    * @type {string}
    * @memberof EditedPagesDataApiGetTopByEditsCount
    */
    readonly project: string
    
    /**
    * If you want to filter by editor-type, use one of anonymous, group-bot (registered accounts belonging to the bot group), name-bot (registered accounts not belonging to the bot group but having bot-like names) or user (registered account not in bot group nor having bot-like name). If you are interested in edits regardless of their editor-type, use all-editor-types. 
    * @type {'all-editor-types' | 'anonymous' | 'group-bot' | 'name-bot' | 'user'}
    * @memberof EditedPagesDataApiGetTopByEditsCount
    */
    readonly editorType: 'all-editor-types' | 'anonymous' | 'group-bot' | 'name-bot' | 'user'
    
    /**
    * If you want to filter by page-type, use one of content (edits on pages in content namespaces) or non-content (edits on pages in non-content namespaces). If you are interested in edits regardless of their page-type, use all-page-types. 
    * @type {'all-page-types' | 'content' | 'non-content'}
    * @memberof EditedPagesDataApiGetTopByEditsCount
    */
    readonly pageType: 'all-page-types' | 'content' | 'non-content'
    
    /**
    * The year of the date for which to retrieve top edited-pages, in YYYY format.
    * @type {string}
    * @memberof EditedPagesDataApiGetTopByEditsCount
    */
    readonly year: string
    
    /**
    * The month of the date for which to retrieve top edited-pages, in MM format. If you want to get the top edited-pages of a whole month, the day parameter should be all-days.
    * @type {string}
    * @memberof EditedPagesDataApiGetTopByEditsCount
    */
    readonly month: string
    
    /**
    * The day of the date for which to retrieve top edited-pages, in DD format, or all-days for a monthly value.
    * @type {string}
    * @memberof EditedPagesDataApiGetTopByEditsCount
    */
    readonly day: string
    
}

/**
 * Request parameters for getTopByNetBytesDifference operation in EditedPagesDataApi.
 * @export
 * @interface EditedPagesDataApiGetTopByNetBytesDifferenceRequest
 */
export type EditedPagesDataApiGetTopByNetBytesDifferenceRequest = {
    
    /**
    * The name of any Wikimedia project formatted like {language code}.{project name}, for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped off. For projects like commons without language codes, use commons.wikimedia. For projects like www.mediawiki.org, you can use that full string, or just use mediawiki or mediawiki.org. 
    * @type {string}
    * @memberof EditedPagesDataApiGetTopByNetBytesDifference
    */
    readonly project: string
    
    /**
    * If you want to filter by editor-type, use one of anonymous, group-bot (registered accounts belonging to the bot group), name-bot (registered accounts not belonging to the bot group but having bot-like names) or user (registered account not in bot group nor having bot-like name). If you are interested in edits regardless of their editor-type, use all-editor-types. 
    * @type {'all-editor-types' | 'anonymous' | 'group-bot' | 'name-bot' | 'user'}
    * @memberof EditedPagesDataApiGetTopByNetBytesDifference
    */
    readonly editorType: 'all-editor-types' | 'anonymous' | 'group-bot' | 'name-bot' | 'user'
    
    /**
    * If you want to filter by page-type, use one of content (edits on pages in content namespaces) or non-content (edits on pages in non-content namespaces). If you are interested in edits regardless of their page-type, use all-page-types. 
    * @type {'all-page-types' | 'content' | 'non-content'}
    * @memberof EditedPagesDataApiGetTopByNetBytesDifference
    */
    readonly pageType: 'all-page-types' | 'content' | 'non-content'
    
    /**
    * The year of the date for which to retrieve top edited-pages, in YYYY format.
    * @type {string}
    * @memberof EditedPagesDataApiGetTopByNetBytesDifference
    */
    readonly year: string
    
    /**
    * The month of the date for which to retrieve top edited-pages, in MM format. If you want to get the top edited-pages of a whole month, the day parameter should be all-days.
    * @type {string}
    * @memberof EditedPagesDataApiGetTopByNetBytesDifference
    */
    readonly month: string
    
    /**
    * The day of the date for which to retrieve top edited-pages, in DD format, or all-days for a monthly value.
    * @type {string}
    * @memberof EditedPagesDataApiGetTopByNetBytesDifference
    */
    readonly day: string
    
}

/**
 * EditedPagesDataApiGenerated - object-oriented interface
 * @export
 * @class EditedPagesDataApiGenerated
 * @extends {BaseAPI}
 */
export class EditedPagesDataApiGenerated extends BaseAPI {
    /**
     * Given a Mediawiki project and a date range, returns a timeseries of its edited-pages counts. You can filter by editor-type (all-editor-types, anonymous, group-bot, name-bot, user), page-type (all-page-types, content or non-content) or activity-level (1..4-edits, 5..24-edits, 25..99-edits, 100..-edits). You can choose between daily and monthly granularity as well.  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental) - Rate limit: 25 req/s - License: Data accessible via this endpoint is available under the   [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/). 
     * @summary Get edited-pages counts for a project.
     * @param {EditedPagesDataApiGetAggregateByProjectAndDateRangeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EditedPagesDataApiGenerated
     */
    public getAggregateByProjectAndDateRange(requestParameters: EditedPagesDataApiGetAggregateByProjectAndDateRangeRequest, options?: AxiosRequestConfig) {
        return EditedPagesDataApiFp(this.configuration).getAggregateByProjectAndDateRange(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Given a Mediawiki project and a date range, returns a timeseries of its new pages counts. You can filter by editor type (all-editor-types, anonymous, group-bot, name-bot, user) or page-type (all-page-types, content or non-content). You can choose between daily and monthly granularity as well.  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental) - Rate limit: 25 req/s - License: Data accessible via this endpoint is available under the   [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/). 
     * @summary Get new pages counts for a project.
     * @param {EditedPagesDataApiGetNewPagesCountsForProjectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EditedPagesDataApiGenerated
     */
    public getNewPagesCountsForProject(requestParameters: EditedPagesDataApiGetNewPagesCountsForProjectRequest, options?: AxiosRequestConfig) {
        return EditedPagesDataApiFp(this.configuration).getNewPagesCountsForProject(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Given a Mediawiki project and a date (day or month), returns a timeseries of the top 100 edited-pages by absolute bytes-difference. You can filter by editor-type (all-editor-types, anonymous, group-bot, name-bot, user) or page-type (all-page-types, content or non-content).  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental) - Rate limit: 25 req/s - License: Data accessible via this endpoint is available under the   [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/). 
     * @summary Get top 100 edited-pages by absolute bytes-difference.
     * @param {EditedPagesDataApiGetTopByAbsoluteBytesDifferenceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EditedPagesDataApiGenerated
     */
    public getTopByAbsoluteBytesDifference(requestParameters: EditedPagesDataApiGetTopByAbsoluteBytesDifferenceRequest, options?: AxiosRequestConfig) {
        return EditedPagesDataApiFp(this.configuration).getTopByAbsoluteBytesDifference(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Given a Mediawiki project and a date (day or month), returns a timeseries of the top 100 edited-pages by edits count. You can filter by editor-type (all-editor-types, anonymous, group-bot, name-bot, user) or page-type (all-page-types, content or non-content).  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental) - Rate limit: 25 req/s - License: Data accessible via this endpoint is available under the   [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/). 
     * @summary Get top 100 edited-pages by edits count.
     * @param {EditedPagesDataApiGetTopByEditsCountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EditedPagesDataApiGenerated
     */
    public getTopByEditsCount(requestParameters: EditedPagesDataApiGetTopByEditsCountRequest, options?: AxiosRequestConfig) {
        return EditedPagesDataApiFp(this.configuration).getTopByEditsCount(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Given a Mediawiki project and a date (day or month), returns a timeseries of the top 100 edited-pages by net bytes-difference. You can filter by editor-type (all-editor-types, anonymous, group-bot, name-bot, user) or page-type (all-page-types, content or non-content).  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental) - Rate limit: 25 req/s - License: Data accessible via this endpoint is available under the   [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/). 
     * @summary Get top 100 edited-pages by net bytes-difference.
     * @param {EditedPagesDataApiGetTopByNetBytesDifferenceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EditedPagesDataApiGenerated
     */
    public getTopByNetBytesDifference(requestParameters: EditedPagesDataApiGetTopByNetBytesDifferenceRequest, options?: AxiosRequestConfig) {
        return EditedPagesDataApiFp(this.configuration).getTopByNetBytesDifference(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
